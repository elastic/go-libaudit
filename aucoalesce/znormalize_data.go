// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mknormalize_data.go - DO NOT EDIT.

package aucoalesce

import (
	"encoding/base64"
	"fmt"
)

var assets map[string][]byte

func asset(key string) ([]byte, error) {
	if assets == nil {
		assets = map[string][]byte{}

		var value []byte
		value, _ = base64.StdEncoding.DecodeString("LS0tCiMgTWFjcm9zIGRlY2xhcmVzIHNvbWUgWUFNTCBhbmNob3JzIHRoYXQgY2FuIGJlIHJlZmVyZW5jZWQgZm9yIHNvbWUgY29tbW9uCiMgb2JqZWN0IHR5cGUgbm9ybWFsaXphdGlvbnMgbGlrZSB1c2VyLXNlc3Npb24sIHNvY2tldCwgb3IgcHJvY2Vzcy4KbWFjcm9zOgogIC0gJmRlZmF1bHRzCiAgICBzdWJqZWN0OgogICAgICBwcmltYXJ5OiBhdWlkCiAgICAgIHNlY29uZGFyeTogdWlkCiAgICBob3c6IFtleGUsIGNvbW1dCgogIC0gJm1hY3JvLXVzZXItc2Vzc2lvbgogICAgc3ViamVjdDoKICAgICAgcHJpbWFyeTogYXVpZAogICAgICBzZWNvbmRhcnk6IFthY2N0LCBpZCwgdWlkXQogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiB0ZXJtaW5hbAogICAgICBzZWNvbmRhcnk6IFthZGRyLCBob3N0bmFtZV0KICAgICAgd2hhdDogdXNlci1zZXNzaW9uCiAgICBob3c6IFtleGUsIHRlcm1pbmFsXQoKICAtICZtYWNyby1zb2NrZXQKICAgIDw8OiAqZGVmYXVsdHMKICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogW2FkZHIsIHBhdGhdCiAgICAgIHNlY29uZGFyeTogcG9ydAogICAgICB3aGF0OiBzb2NrZXQKCiAgLSAmbWFjcm8tcHJvY2VzcwogICAgPDw6ICpkZWZhdWx0cwogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiBbY21kLCBleGUsIGNvbW1dCiAgICAgIHNlY29uZGFyeTogcGlkCiAgICAgIHdoYXQ6IHByb2Nlc3MKICAgIGhvdzogdGVybWluYWwKCiAgLSAmZWNzLWlhbQogICAgY2F0ZWdvcnk6IGlhbQogICAgdHlwZTogaW5mbwoKICAtICZlY3MtYXV0aAogICAgY2F0ZWdvcnk6IGF1dGhlbnRpY2F0aW9uCiAgICB0eXBlOiBpbmZvCgogIC0gJmVjcy1ob3N0CiAgICBjYXRlZ29yeTogaG9zdAogICAgdHlwZTogaW5mbwoKICAtICZlY3MtcHJvY2VzcwogICAgY2F0ZWdvcnk6IHByb2Nlc3MKICAgIHR5cGU6IGluZm8KCiAgLSAmZWNzLWZpbGUKICAgIGNhdGVnb3J5OiBmaWxlCiAgICB0eXBlOiBpbmZvCgogIC0gJmVjcy1uZXR3b3JrCiAgICBjYXRlZ29yeTogbmV0d29yawogICAgdHlwZToKICAgICAgLSBjb25uZWN0aW9uCiAgICAgIC0gaW5mbwoKIyBOb3JtYWxpemF0aW9ucyBpcyBhIGxpc3Qgb2YgZGVjbGFyYXRpb25zIHNwZWNpZnlpbmcgaG93IHRvIG5vcm1hbGl6ZSB0aGUgZGF0YQojIGNvbnRhaW5lZCBpbiBhbiBldmVudC4gVGhlIG5vcm1hbGl6YXRpb24gY2FuIGJlIGFwcGxpZWQgYmFzZWQgb24gdGhlIHN5c2NhbGwKIyBuYW1lIChlLmcuIGNvbm5lY3QsIG9wZW4pIG9yIGJhc2VkIG9uIHRoZSByZWNvcmQgdHlwZSAoZS5nLiBVU0VSX0xPR0lOKS4KIyBObyB0d28gbm9ybWFsaXphdGlvbnMgY2FuIGFwcGx5IHRvIHRoZSBzYW1lIHN5c2NhbGwgb3IgcmVjb3JkIHR5cGUuIFRoaXMKIyB3aWxsIHJlc3VsdCBpbiBhIGZhaWx1cmUgYXQgbG9hZCB0aW1lLgojCiMgRWFjaCBub3JtYWxpemF0aW9uIHNob3VsZCBzcGVjaWZ5OgojICAgYWN0aW9uIC0gd2hhdCBoYXBwZW5lZAojICAgYWN0b3IgIC0gd2hvIGRpZCB0aGlzIG9yIHdobyB0cmlnZ2VyZWQgdGhlIGV2ZW50CiMgICBvYmplY3QgLSB3aGF0IHdhcyB0aGUgInRoaW5nIiBpbnZvbHZlZCBpbiB0aGUgYWN0aW9uIChlLmcuIHByb2Nlc3MsIHNvY2tldCkKIyAgIGhvdyAgICAtIGhvdyB3YXMgdGhlIGFjdGlvbiBwZXJmb3JtZWQgKGUuZy4gZXhlIG9yIHRlcm1pbmFsKQpub3JtYWxpemF0aW9uczoKICAtIGVjczogKmVjcy1wcm9jZXNzCiAgICBzeXNjYWxsczoKICAgICAgLSAnKicgIyB0aGlzIGlzIGEgY2F0Y2ggYWxsCiAgLSBhY3Rpb246IG9wZW5lZC1maWxlCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IGZpbGUKICAgIHN5c2NhbGxzOgogICAgICAjIGNyZWF0IC0gb3BlbiBhbmQgcG9zc2libHkgY3JlYXRlIGEgZmlsZQogICAgICAtIGNyZWF0CiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWZpbGUKICAgICAgdHlwZTogY3JlYXRpb24KICAtIGFjdGlvbjogb3BlbmVkLWZpbGUKICAgIG9iamVjdDoKICAgICAgd2hhdDogZmlsZQogICAgc3lzY2FsbHM6CiAgICAgICMgZmFsbG9jYXRlIC0gbWFuaXB1bGF0ZSBmaWxlIHNwYWNlCiAgICAgIC0gZmFsbG9jYXRlCiAgICAgICMgdHJ1bmNhdGUgLSB0cnVuY2F0ZSBhIGZpbGUgdG8gYSBzcGVjaWZpZWQgbGVuZ3RoCiAgICAgIC0gdHJ1bmNhdGUKICAgICAgIyBmdHJ1bmNhdGUgLSB0cnVuY2F0ZSBhIGZpbGUgdG8gYSBzcGVjaWZpZWQgbGVuZ3RoCiAgICAgIC0gZnRydW5jYXRlCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWZpbGUKICAgICAgIyB0ZWNobmljYWxseSB5b3UgY2FuIHRydW5jYXRlIGEgZmlsZSB0byB0aGUgc2FtZSBsZW5ndGgKICAgICAgIyBidXQgcmVnYXJkbGVzcywgd2UgY29uc2lkZXIgdGhpcyBhIGNoYW5nZQogICAgICB0eXBlOiBjaGFuZ2UKICAtIGFjdGlvbjogb3BlbmVkLWZpbGUKICAgIG9iamVjdDoKICAgICAgd2hhdDogZmlsZQogICAgc3lzY2FsbHM6CiAgICAgICMgb3BlbiAtIG9wZW4gYW5kIHBvc3NpYmx5IGNyZWF0ZSBhIGZpbGUKICAgICAgLSBvcGVuCiAgICAgICMgb3BlbmF0IC0gb3BlbiBhbmQgcG9zc2libHkgY3JlYXRlIGEgZmlsZQogICAgICAtIG9wZW5hdAogICAgICAjIHJlYWRsaW5rIC0gcmVhZCB2YWx1ZSBvZiBhIHN5bWJvbGljIGxpbmsKICAgICAgLSByZWFkbGluawogICAgICAjIHJlYWRsaW5rYXQgLSByZWFkIHZhbHVlIG9mIGEgc3ltYm9saWMgbGluawogICAgICAtIHJlYWRsaW5rYXQKICAgIGVjczogKmVjcy1maWxlCiAgLSBhY3Rpb246IHJlYWQtZmlsZQogICAgb2JqZWN0OgogICAgICB3aGF0OiBmaWxlCiAgICBzeXNjYWxsczoKICAgICAgIyByZWFkIC0gcmVhZCBmcm9tIGEgZmlsZSBkZXNjcmlwdG9yCiAgICAgIC0gcmVhZAogICAgZWNzOiAqZWNzLWZpbGUKICAtIGFjdGlvbjogd3JvdGUtdG8tZmlsZQogICAgb2JqZWN0OgogICAgICB3aGF0OiBmaWxlCiAgICBzeXNjYWxsczoKICAgICAgIyB3cml0ZSAtIHdyaXRlIHRvIGEgZmlsZSBkZXNjcmlwdG9yCiAgICAgIC0gd3JpdGUKICAgIGVjczoKICAgICAgPDw6ICplY3MtZmlsZQogICAgICB0eXBlOiBjaGFuZ2UKICAtIGFjdGlvbjogY2hhbmdlZC1maWxlLWF0dHJpYnV0ZXMtb2YKICAgIG9iamVjdDoKICAgICAgd2hhdDogZmlsZQogICAgc3lzY2FsbHM6CiAgICAgICMgc2V0eGF0dHIgLSBzZXQgYW4gZXh0ZW5kZWQgYXR0cmlidXRlIHZhbHVlCiAgICAgIC0gc2V0eGF0dHIKICAgICAgIyBmc2V0eGF0dHIgLSBzZXQgYW4gZXh0ZW5kZWQgYXR0cmlidXRlIHZhbHVlCiAgICAgIC0gZnNldHhhdHRyCiAgICAgICMgbHNldHhhdHRyIC0gc2V0IGFuIGV4dGVuZGVkIGF0dHJpYnV0ZSB2YWx1ZQogICAgICAtIGxzZXR4YXR0cgogICAgICAjIHJlbW92ZXhhdHRyIC0gcmVtb3ZlIGFuIGV4dGVuZGVkIGF0dHJpYnV0ZQogICAgICAtIHJlbW92ZXhhdHRyCiAgICAgICMgZnJlbW92ZXhhdHRyIC0gcmVtb3ZlIGFuIGV4dGVuZGVkIGF0dHJpYnV0ZQogICAgICAtIGZyZW1vdmV4YXR0cgogICAgICAjIGxyZW1vdmV4YXR0ciAtIHJlbW92ZSBhbiBleHRlbmRlZCBhdHRyaWJ1dGUKICAgICAgLSBscmVtb3ZleGF0dHIKICAgIGVjczoKICAgICAgPDw6ICplY3MtZmlsZQogICAgICB0eXBlOiBjaGFuZ2UKICAtIGFjdGlvbjogY2hhbmdlZC1maWxlLXBlcm1pc3Npb25zLW9mCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IGZpbGUKICAgIHN5c2NhbGxzOgogICAgICAjIGNobW9kIC0gY2hhbmdlIHBlcm1pc3Npb25zIG9mIGEgZmlsZQogICAgICAtIGNobW9kCiAgICAgICMgZmNobW9kIC0gY2hhbmdlIHBlcm1pc3Npb25zIG9mIGEgZmlsZQogICAgICAtIGZjaG1vZAogICAgICAjIGZjaG1vZGF0IC0gY2hhbmdlIHBlcm1pc3Npb25zIG9mIGEgZmlsZQogICAgICAtIGZjaG1vZGF0CiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWZpbGUKICAgICAgdHlwZTogY2hhbmdlCiAgLSBhY3Rpb246IGNoYW5nZWQtZmlsZS1vd25lcnNoaXAtb2YKICAgIG9iamVjdDoKICAgICAgd2hhdDogZmlsZQogICAgc3lzY2FsbHM6CiAgICAgICMgY2hvd24gLSBjaGFuZ2Ugb3duZXJzaGlwIG9mIGEgZmlsZQogICAgICAtIGNob3duCiAgICAgICMgZmNob3duIC0gY2hhbmdlIG93bmVyc2hpcCBvZiBhIGZpbGUKICAgICAgLSBmY2hvd24KICAgICAgIyBmY2hvd25hdCAtIGNoYW5nZSBvd25lcnNoaXAgb2YgYSBmaWxlCiAgICAgIC0gZmNob3duYXQKICAgICAgIyBsY2hvd24gLSBjaGFuZ2Ugb3duZXJzaGlwIG9mIGEgZmlsZQogICAgICAtIGxjaG93bgogICAgZWNzOgogICAgICA8PDogKmVjcy1maWxlCiAgICAgIHR5cGU6IGNoYW5nZQogIC0gYWN0aW9uOiBsb2FkZWQta2VybmVsLW1vZHVsZQogICAgb2JqZWN0OgogICAgICB3aGF0OiBmaWxlCiAgICAgIHByaW1hcnk6IG5hbWUKICAgIHJlY29yZF90eXBlczoKICAgICAgLSBLRVJOX01PRFVMRQogICAgc3lzY2FsbHM6CiAgICAgICMgZmluaXRfbW9kdWxlIC0gbG9hZCBhIGtlcm5lbCBtb2R1bGUKICAgICAgLSBmaW5pdF9tb2R1bGUKICAgICAgIyBpbml0X21vZHVsZSAtIGxvYWQgYSBrZXJuZWwgbW9kdWxlCiAgICAgIC0gaW5pdF9tb2R1bGUKICAgIGVjczoKICAgICAgY2F0ZWdvcnk6IGRyaXZlcgogICAgICB0eXBlOiBzdGFydAogIC0gYWN0aW9uOiB1bmxvYWRlZC1rZXJuZWwtbW9kdWxlCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IGZpbGUKICAgIHN5c2NhbGxzOgogICAgICAjIGRlbGV0ZV9tb2R1bGUgLSB1bmxvYWQgYSBrZXJuZWwgbW9kdWxlCiAgICAgIC0gZGVsZXRlX21vZHVsZQogICAgZWNzOgogICAgICA8PDogKmVjcy1maWxlCiAgICAgIHR5cGU6IGVuZAogIC0gYWN0aW9uOiBjcmVhdGVkLWRpcmVjdG9yeQogICAgb2JqZWN0OgogICAgICB3aGF0OiBmaWxlCiAgICAgIHBhdGhfaW5kZXg6IDEKICAgIHN5c2NhbGxzOgogICAgICAjIG1rZGlyIC0gY3JlYXRlIGEgZGlyZWN0b3J5CiAgICAgIC0gbWtkaXIKICAgICAgIyBta2RpcmF0IC0gY3JlYXRlIGEgZGlyZWN0b3J5CiAgICAgIC0gbWtkaXJhdAogICAgZWNzOgogICAgICA8PDogKmVjcy1maWxlCiAgICAgIHR5cGU6IGNyZWF0aW9uCiAgLSBhY3Rpb246IG1vdW50ZWQKICAgIG9iamVjdDoKICAgICAgd2hhdDogZmlsZXN5c3RlbQogICAgICBwYXRoX2luZGV4OiAxCiAgICBzeXNjYWxsczoKICAgICAgIyBtb3VudCAtIG1vdW50IGZpbGVzeXN0ZW0KICAgICAgLSBtb3VudAogICAgZWNzOgogICAgICA8PDogKmVjcy1maWxlCiAgICAgICMgc2luY2UgYSBuZXcgbW91bnQgYXBwZWFycyBvbiB0aGUgc3lzdGVtCiAgICAgICMgd2UgY29uc2lkZXIgdGhpcyBhIGhpZ2gtbGV2ZWwgImNyZWF0aW9uIiBldmVudAogICAgICB0eXBlOiBjcmVhdGlvbgogIC0gYWN0aW9uOiByZW5hbWVkCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IGZpbGUKICAgICAgcGF0aF9pbmRleDogMgogICAgc3lzY2FsbHM6CiAgICAgICMgcmVuYW1lIC0gY2hhbmdlIHRoZSBuYW1lIG9yIGxvY2F0aW9uIG9mIGEgZmlsZQogICAgICAtIHJlbmFtZQogICAgICAjIHJlbmFtZWF0IC0gY2hhbmdlIHRoZSBuYW1lIG9yIGxvY2F0aW9uIG9mIGEgZmlsZQogICAgICAtIHJlbmFtZWF0CiAgICAgICMgcmVuYW1lYXQyIC0gY2hhbmdlIHRoZSBuYW1lIG9yIGxvY2F0aW9uIG9mIGEgZmlsZQogICAgICAtIHJlbmFtZWF0MgogICAgZWNzOgogICAgICA8PDogKmVjcy1maWxlCiAgICAgIHR5cGU6IGNoYW5nZQogIC0gYWN0aW9uOiBjaGVja2VkLW1ldGFkYXRhLW9mCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IGZpbGUKICAgIHN5c2NhbGxzOgogICAgICAjIGFjY2VzcyAtIGNoZWNrIHVzZXIncyBwZXJtaXNzaW9ucyBmb3IgYSBmaWxlCiAgICAgIC0gYWNjZXNzCiAgICAgICMgZmFjY2Vzc2F0IC0gY2hlY2sgdXNlcidzIHBlcm1pc3Npb25zIGZvciBhIGZpbGUKICAgICAgLSBmYWNjZXNzYXQKICAgICAgIyBmc3RhdGF0IC0gZ2V0IGZpbGUgc3RhdHVzCiAgICAgIC0gZnN0YXRhdAogICAgICAjIHN0YXQgLSBnZXQgZmlsZSBzdGF0dXMKICAgICAgLSBzdGF0CiAgICAgICMgZnN0YXQgLSBnZXQgZmlsZSBzdGF0dXMKICAgICAgLSBmc3RhdAogICAgICAjIGxzdGF0IC0gZ2V0IGZpbGUgc3RhdHVzCiAgICAgIC0gbHN0YXQKICAgICAgIyBnZXR4YXR0ciAtIHJldHJpZXZlIGFuIGV4dGVuZGVkIGF0dHJpYnV0ZSB2YWx1ZQogICAgICAtIGdldHhhdHRyCiAgICAgICMgbGdldHhhdHRyIC0gcmV0cmlldmUgYW4gZXh0ZW5kZWQgYXR0cmlidXRlIHZhbHVlCiAgICAgIC0gbGdldHhhdHRyCiAgICAgICMgZmdldHhhdHRyIC0gcmV0cmlldmUgYW4gZXh0ZW5kZWQgYXR0cmlidXRlIHZhbHVlCiAgICAgIC0gZmdldHhhdHRyCiAgICBlY3M6ICplY3MtZmlsZQogIC0gYWN0aW9uOiBjaGVja2VkLWZpbGVzeXN0ZW0tbWV0YWRhdGEtb2YKICAgIG9iamVjdDoKICAgICAgd2hhdDogZmlsZXN5c3RlbQogICAgc3lzY2FsbHM6CiAgICAgICMgc3RhdGZzIC0gZ2V0IGZpbGVzeXN0ZW0gc3RhdGlzdGljcwogICAgICAtIHN0YXRmcwogICAgICAjIGZzdGF0ZnMgLSBnZXQgZmlsZXN5c3RlbSBzdGF0aXN0aWNzCiAgICAgIC0gZnN0YXRmcwogICAgZWNzOiAqZWNzLWZpbGUKICAtIGFjdGlvbjogc3ltbGlua2VkCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IGZpbGUKICAgIHN5c2NhbGxzOgogICAgICAjIHN5bWxpbmsgLSBtYWtlIGEgbmV3IG5hbWUgZm9yIGEgZmlsZQogICAgICAtIHN5bWxpbmsKICAgICAgIyBzeW1saW5rYXQgLSBtYWtlIGEgbmV3IG5hbWUgZm9yIGEgZmlsZQogICAgICAtIHN5bWxpbmthdAogICAgZWNzOgogICAgICA8PDogKmVjcy1maWxlCiAgICAgICMgImNyZWF0aW9uIiBzaW5jZSB3ZSdyZSBjcmVhdGluZyBhIG5ldyBmaWxlIHN5c3RlbQogICAgICAjIGVudHJ5IGZvciB0aGUgc3ltbGluawogICAgICB0eXBlOiBjcmVhdGlvbgogIC0gYWN0aW9uOiB1bm1vdW50ZWQKICAgIG9iamVjdDoKICAgICAgd2hhdDogZmlsZXN5c3RlbQogICAgc3lzY2FsbHM6CiAgICAgICMgdW1vdW50IC0gdW5tb3VudCBmaWxlc3lzdGVtCiAgICAgIC0gdW1vdW50CiAgICAgICMgdW1vdW50MiAtIHVubW91bnQgZmlsZXN5c3RlbQogICAgICAtIHVtb3VudDIKICAgIGVjczoKICAgICAgPDw6ICplY3MtZmlsZQogICAgICAjICJkZWxldGlvbiIgdG8gbWlycm9yIHRoZSAiY3JlYXRpb24iIG9mIHRoZSBtb3VudAogICAgICB0eXBlOiBkZWxldGlvbgogIC0gYWN0aW9uOiBkZWxldGVkCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IGZpbGUKICAgIHN5c2NhbGxzOgogICAgICAjIHJtZGlyIC0gZGVsZXRlIGEgZGlyZWN0b3J5CiAgICAgIC0gcm1kaXIKICAgICAgIyB1bmxpbmsgLSBkZWxldGUgYSBuYW1lIGFuZCBwb3NzaWJseSB0aGUgZmlsZSBpdCByZWZlcnMgdG8KICAgICAgLSB1bmxpbmsKICAgICAgIyB1bmxpbmthdCAtIGRlbGV0ZSBhIG5hbWUgYW5kIHBvc3NpYmx5IHRoZSBmaWxlIGl0IHJlZmVycyB0bwogICAgICAtIHVubGlua2F0CiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWZpbGUKICAgICAgdHlwZTogZGVsZXRpb24KICAtIGFjdGlvbjogY2hhbmdlZC10aW1lc3RhbXAtb2YKICAgIG9iamVjdDoKICAgICAgd2hhdDogZmlsZQogICAgc3lzY2FsbHM6CiAgICAgICMgdXRpbWUgLSBjaGFuZ2UgZmlsZSBsYXN0IGFjY2VzcyBhbmQgbW9kaWZpY2F0aW9uIHRpbWVzCiAgICAgIC0gdXRpbWUKICAgICAgIyB1dGltZXMgLSBjaGFuZ2UgZmlsZSBsYXN0IGFjY2VzcyBhbmQgbW9kaWZpY2F0aW9uIHRpbWVzCiAgICAgIC0gdXRpbWVzCiAgICAgICMgZnV0aW1lc2F0IC0gY2hhbmdlIHRpbWVzdGFtcHMgb2YgYSBmaWxlIHJlbGF0aXZlIHRvIGEgXCBkaXJlY3RvcnkgZmlsZSBkZXNjcmlwdG9yCiAgICAgIC0gZnV0aW1lc2F0CiAgICAgICMgZnV0aW1lbnMgLSBjaGFuZ2UgZmlsZSB0aW1lc3RhbXBzIHdpdGggbmFub3NlY29uZCBwcmVjaXNpb24KICAgICAgLSBmdXRpbWVucwogICAgICAjIHV0aW1lbnNhdCAtIGNoYW5nZSBmaWxlIHRpbWVzdGFtcHMgd2l0aCBuYW5vc2Vjb25kIHByZWNpc2lvbgogICAgICAtIHV0aW1lbnNhdAogICAgZWNzOiAqZWNzLWZpbGUKICAtIGFjdGlvbjogZXhlY3V0ZWQKICAgIG9iamVjdDoKICAgICAgd2hhdDogZmlsZQogICAgc3lzY2FsbHM6CiAgICAgICMgZXhlY3ZlIC0gZXhlY3V0ZSBwcm9ncmFtCiAgICAgIC0gZXhlY3ZlCiAgICAgICMgZXhlY3ZlYXQgLSBleGVjdXRlIHByb2dyYW0gcmVsYXRpdmUgdG8gYSBkaXJlY3RvcnkgZmlsZSBkZXNjcmlwdG9yCiAgICAgIC0gZXhlY3ZlYXQKICAgIGVjczoKICAgICAgPDw6ICplY3MtcHJvY2VzcwogICAgICB0eXBlOiBzdGFydAogIC0gYWN0aW9uOiBsaXN0ZW4tZm9yLWNvbm5lY3Rpb25zCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IHNvY2tldAogICAgc3lzY2FsbHM6CiAgICAgICMgbGlzdGVuLSBsaXN0ZW4gZm9yIGNvbm5lY3Rpb25zIG9uIGEgc29ja2V0CiAgICAgIC0gbGlzdGVuCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLW5ldHdvcmsKICAgICAgdHlwZTogc3RhcnQKICAtIGFjdGlvbjogYWNjZXB0ZWQtY29ubmVjdGlvbi1mcm9tCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IHNvY2tldAogICAgc3lzY2FsbHM6CiAgICAgICMgYWNjZXB0IC0gYWNjZXB0IGEgY29ubmVjdGlvbiBvbiBhIHNvY2tldAogICAgICAtIGFjY2VwdAogICAgICAjIGFjY2VwdDQgLSBhY2NlcHQgYSBjb25uZWN0aW9uIG9uIGEgc29ja2V0CiAgICAgIC0gYWNjZXB0NAogICAgZWNzOgogICAgICA8PDogKmVjcy1uZXR3b3JrCiAgICAgIHR5cGU6CiAgICAgICAgLSBjb25uZWN0aW9uCiAgICAgICAgLSBzdGFydAogIC0gYWN0aW9uOiBib3VuZC1zb2NrZXQKICAgIG9iamVjdDoKICAgICAgd2hhdDogc29ja2V0CiAgICBzeXNjYWxsczoKICAgICAgIyBiaW5kIC1iaW5kIGEgbmFtZSB0byBhIHNvY2tldAogICAgICAtIGJpbmQKICAgIGVjczoKICAgICAgPDw6ICplY3MtbmV0d29yawogICAgICB0eXBlOiBzdGFydAogIC0gYWN0aW9uOiBjb25uZWN0ZWQtdG8KICAgIG9iamVjdDoKICAgICAgd2hhdDogc29ja2V0CiAgICBzeXNjYWxsczoKICAgICAgLSBjb25uZWN0CiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLW5ldHdvcmsKICAgICAgdHlwZToKICAgICAgICAtIGNvbm5lY3Rpb24KICAgICAgICAtIHN0YXJ0CiAgLSBhY3Rpb246IHJlY2VpdmVkLWZyb20KICAgIG9iamVjdDoKICAgICAgd2hhdDogc29ja2V0CiAgICBzeXNjYWxsczoKICAgICAgIyByZWN2IC0gcmVjZWl2ZSBhIG1lc3NhZ2UgZnJvbSBhIHNvY2tldAogICAgICAtIHJlY3YKICAgICAgIyByZWN2ZnJvbSAtIHJlY2VpdmUgYSBtZXNzYWdlIGZyb20gYSBzb2NrZXQKICAgICAgLSByZWN2ZnJvbQogICAgICAjIHJlY3Ztc2cgLSByZWNlaXZlIGEgbWVzc2FnZSBmcm9tIGEgc29ja2V0CiAgICAgIC0gcmVjdm1zZwogICAgICAjIHJlY3ZtbXNnIC0gcmVjZWl2ZSBtdWx0aXBsZSBtZXNzYWdlcyBvbiBhIHNvY2tldAogICAgICAtIHJlY3ZtbXNnCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLW5ldHdvcmsKICAtIGFjdGlvbjogc2VudC10bwogICAgb2JqZWN0OgogICAgICB3aGF0OiBzb2NrZXQKICAgIHN5c2NhbGxzOgogICAgICAjIHNlbmQgLSBzZW5kIGEgbWVzc2FnZSBvbiBhIHNvY2tldAogICAgICAtIHNlbmQKICAgICAgIyBzZW5kdG8gLSBzZW5kIGEgbWVzc2FnZSBvbiBhIHNvY2tldAogICAgICAtIHNlbmR0bwogICAgICAjIHNlbmRtc2cgLSBzZW5kIGEgbWVzc2FnZSBvbiBhIHNvY2tldAogICAgICAtIHNlbmRtc2cKICAgICAgIyBzZW5kbW1zZyAtIHNlbmQgbXVsdGlwbGUgbWVzc2FnZXMgb24gYSBzb2NrZXQKICAgICAgLSBzZW5kbW1zZwogICAgZWNzOgogICAgICA8PDogKmVjcy1uZXR3b3JrCiAgLSBhY3Rpb246IGtpbGxlZC1waWQKICAgIG9iamVjdDoKICAgICAgd2hhdDogcHJvY2VzcwogICAgc3lzY2FsbHM6CiAgICAgICMga2lsbCAtIHNlbmQgc2lnbmFsIHRvIGEgcHJvY2VzcwogICAgICAtIGtpbGwKICAgICAgIyB0a2lsbCAtIHNlbmQgYSBzaWduYWwgdG8gYSB0aHJlYWQKICAgICAgLSB0a2lsbAogICAgICAjIHRna2lsbCAtIHNlbmQgYSBzaWduYWwgdG8gYSB0aHJlYWQKICAgICAgLSB0Z2tpbGwKICAgIGVjczoKICAgICAgPDw6ICplY3MtcHJvY2VzcwogICAgICB0eXBlOiBlbmQKICAtIGFjdGlvbjogY2hhbmdlZC1pZGVudGl0eS1vZgogICAgb2JqZWN0OgogICAgICB3aGF0OiBwcm9jZXNzCiAgICBob3c6IHN5c2NhbGwKICAgIHN5c2NhbGxzOgogICAgICAjIHNldHVpZCAtIHNldCB1c2VyIGlkZW50aXR5CiAgICAgIC0gc2V0dWlkCiAgICAgICMgc2V0ZXVpZCAtIHNldCBlZmZlY3RpdmUgdXNlciBvciBncm91cCBJRAogICAgICAtIHNldGV1aWQKICAgICAgIyBzZXRmc3VpZCAtIHNldCB1c2VyIGlkZW50aXR5IHVzZWQgZm9yIGZpbGVzeXN0ZW0gY2hlY2tzCiAgICAgIC0gc2V0ZnN1aWQKICAgICAgIyBzZXRyZXVpZCAtIHNldCByZWFsIGFuZC9vciBlZmZlY3RpdmUgdXNlciBvciBncm91cCBJRAogICAgICAtIHNldHJldWlkCiAgICAgICMgc2V0Z2lkIC0gc2V0IGdyb3VwIGlkZW50aXR5CiAgICAgIC0gc2V0Z2lkCiAgICAgICMgc2V0ZWdpZCAtIHNldCBlZmZlY3RpdmUgdXNlciBvciBncm91cCBJRAogICAgICAtIHNldGVnaWQKICAgICAgIyBzZXRmc2dpZCAtIHNldCBncm91cCBpZGVudGl0eSB1c2VkIGZvciBmaWxlc3lzdGVtIGNoZWNrcwogICAgICAtIHNldGZzZ2lkCiAgICAgICMgc2V0cmVnaWQgLSBzZXQgcmVhbCBhbmQvb3IgZWZmZWN0aXZlIHVzZXIgb3IgZ3JvdXAgSUQKICAgICAgLSBzZXRyZWdpZAogICAgICAjIHNldHJlc3VpZCAtIHNldCByZWFsLCBlZmZlY3RpdmUgYW5kIHNhdmVkIHVzZXIgb3IgZ3JvdXAgSUQKICAgICAgLSBzZXRyZXN1aWQKICAgICAgIyBzZXRyZXNnaWQgLSBzZXQgcmVhbCwgZWZmZWN0aXZlIGFuZCBzYXZlZCB1c2VyIG9yIGdyb3VwIElECiAgICAgIC0gc2V0cmVzZ2lkCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLXByb2Nlc3MKICAgICAgdHlwZTogY2hhbmdlCiAgLSBhY3Rpb246IGNoYW5nZWQtc3lzdGVtLXRpbWUKICAgIG9iamVjdDoKICAgICAgd2hhdDogc3lzdGVtCiAgICBzeXNjYWxsczoKICAgICAgIyBzZXR0aW1lb2ZkYXkgLSBnZXQgLyBzZXQgdGltZQogICAgICAtIHNldHRpbWVvZmRheQogICAgICAjIGNsb2NrX3NldHRpbWUgLSBjbG9jayBhbmQgdGltZSBmdW5jdGlvbnMKICAgICAgLSBjbG9ja19zZXR0aW1lCiAgICAgICMgc3RpbWUgLSBzZXQgdGltZQogICAgICAtIHN0aW1lCiAgICAgICMgYWRqdGltZXggLSB0dW5lIGtlcm5lbCBjbG9jawogICAgICAtIGFkanRpbWV4CiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWhvc3QKICAgICAgdHlwZTogY2hhbmdlCiAgLSBhY3Rpb246IG1ha2UtZGV2aWNlCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IGZpbGUKICAgIHN5c2NhbGxzOgogICAgICAjIG1rbm9kIC0gY3JlYXRlIGEgc3BlY2lhbCBvciBvcmRpbmFyeSBmaWxlCiAgICAgIC0gbWtub2QKICAgICAgIyBta25vZGF0IC0gY3JlYXRlIGEgc3BlY2lhbCBvciBvcmRpbmFyeSBmaWxlCiAgICAgIC0gbWtub2RhdAogICAgZWNzOgogICAgICA8PDogKmVjcy1maWxlCiAgICAgIHR5cGU6IGNyZWF0aW9uCiAgLSBhY3Rpb246IGNoYW5nZWQtc3lzdGVtLW5hbWUKICAgIG9iamVjdDoKICAgICAgd2hhdDogc3lzdGVtCiAgICBzeXNjYWxsczoKICAgICAgIyBzZXRob3N0bmFtZSAtIGdldC9zZXQgaG9zdG5hbWUKICAgICAgLSBzZXRob3N0bmFtZQogICAgICAjIHNldGRvbWFpbm5hbWUgLSBnZXQvc2V0IE5JUyBkb21haW4gbmFtZQogICAgICAtIHNldGRvbWFpbm5hbWUKICAgIGVjczoKICAgICAgPDw6ICplY3MtaG9zdAogICAgICB0eXBlOiBjaGFuZ2UKICAtIGFjdGlvbjogYWxsb2NhdGVkLW1lbW9yeQogICAgb2JqZWN0OgogICAgICB3aGF0OiBtZW1vcnkKICAgIHN5c2NhbGxzOgogICAgICAjIG1tYXAgLSBtYXAgb3IgdW5tYXAgZmlsZXMgb3IgZGV2aWNlcyBpbnRvIG1lbW9yeQogICAgICAtIG1tYXAKICAgICAgIyBtbWFwMiAtIG1hcCBmaWxlcyBvciBkZXZpY2VzIGludG8gbWVtb3J5CiAgICAgIC0gbW1hcDIKICAgICAgIyBicmsgLSBjaGFuZ2UgZGF0YSBzZWdtZW50IHNpemUKICAgICAgLSBicmsKICAgIGVjczogKmVjcy1wcm9jZXNzCiAgLSBhY3Rpb246IGFkanVzdGVkLXNjaGVkdWxpbmctcG9saWN5LW9mCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IHByb2Nlc3MKICAgIGhvdzogc3lzY2FsbAogICAgc3lzY2FsbHM6CiAgICAgICMgc2NoZWRfc2V0cGFyYW0gLSBzZXQgYW5kIGdldCBzY2hlZHVsaW5nIHBhcmFtZXRlcnMKICAgICAgLSBzY2hlZF9zZXRwYXJhbQogICAgICAjIHNjaGVkX3NldHNjaGVkdWxlciAtIHNldCBhbmQgZ2V0IHNjaGVkdWxpbmcgcG9saWN5L3BhcmFtZXRlcnMKICAgICAgLSBzY2hlZF9zZXRzY2hlZHVsZXIKICAgICAgIyBzY2hlZF9zZXRhdHRyIC0gc2V0IGFuZCBnZXQgc2NoZWR1bGluZyBwb2xpY3kgYW5kIGF0dHJpYnV0ZXMKICAgICAgLSBzY2hlZF9zZXRhdHRyCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLXByb2Nlc3MKICAgICAgdHlwZTogY2hhbmdlCgogICMgQ3VycmVudGx5IHVuaGFuZGxlZAogICMgdGhpcyBsaXN0IGNvbWVzIGZyb20gcGFyc2luZyBsaW51eCBtYW4gcGFnZXMgYXQgaHR0cHM6Ly9naXQua2VybmVsLm9yZy9wdWIvc2NtL2RvY3MvbWFuLXBhZ2VzL21hbi1wYWdlcy5naXQKCiAgIyBzaWdhY3Rpb24gLSBleGFtaW5lIGFuZCBjaGFuZ2UgYSBzaWduYWwgYWN0aW9uCiAgIyBydF9zaWdhY3Rpb24gLSBleGFtaW5lIGFuZCBjaGFuZ2UgYSBzaWduYWwgYWN0aW9uCiAgIyBwcmVhZCAtIHJlYWQgZnJvbSBvciB3cml0ZSB0byBhIGZpbGUgZGVzY3JpcHRvciBhdCBhIGdpdmVuIG9mZnNldAogICMgcHdyaXRlIC0gcmVhZCBmcm9tIG9yIHdyaXRlIHRvIGEgZmlsZSBkZXNjcmlwdG9yIGF0IGEgZ2l2ZW4gb2Zmc2V0CiAgIyBzMzkwX2d1YXJkZWRfc3RvcmFnZSAtIG9wZXJhdGlvbnMgd2l0aCB6L0FyY2hpdGVjdHVyZSBndWFyZGVkIHN0b3JhZ2UgZmFjaWxpdHkKICAjIHNjaGVkX2dldGF0dHIgLSBzZXQgYW5kIGdldCBzY2hlZHVsaW5nIHBvbGljeSBhbmQgYXR0cmlidXRlcwogICMgZ2V0cnVzYWdlIC0gZ2V0IHJlc291cmNlIHVzYWdlCiAgIyBmbG9jayAtIGFwcGx5IG9yIHJlbW92ZSBhbiBhZHZpc29yeSBsb2NrIG9uIGFuIG9wZW4gZmlsZQogICMgcGlkZmRfZ2V0ZmQgLSBvYnRhaW4gYSBkdXBsaWNhdGUgb2YgYW5vdGhlciBwcm9jZXNzJ3MgZmlsZSBkZXNjcmlwdG9yCiAgIyBjbG9ja19uYW5vc2xlZXAgLSBoaWdoLXJlc29sdXRpb24gc2xlZXAgd2l0aCBzcGVjaWZpYWJsZSBjbG9jawogICMgZ2V0cGFnZXNpemUgLSBnZXQgbWVtb3J5IHBhZ2Ugc2l6ZQogICMgcGlkZmRfb3BlbiAtIG9idGFpbiBhIGZpbGUgZGVzY3JpcHRvciB0aGF0IHJlZmVycyB0byBhIHByb2Nlc3MKICAjIHNwbGljZSAtIHNwbGljZSBkYXRhIHRvL2Zyb20gYSBwaXBlCiAgIyBnZXRyZXN1aWQgLSBnZXQgcmVhbCwgZWZmZWN0aXZlIGFuZCBzYXZlZCB1c2VyL2dyb3VwIElEcwogICMgZ2V0cmVzZ2lkIC0gZ2V0IHJlYWwsIGVmZmVjdGl2ZSBhbmQgc2F2ZWQgdXNlci9ncm91cCBJRHMKICAjIHJlbWFwX2ZpbGVfcGFnZXMgLSBjcmVhdGUgYSBub25saW5lYXIgZmlsZSBtYXBwaW5nCiAgIyBpb19jYW5jZWwgLSBjYW5jZWwgYW4gb3V0c3RhbmRpbmcgYXN5bmNocm9ub3VzIEkvTyBvcGVyYXRpb24KICAjIHByY3RsIC0gb3BlcmF0aW9ucyBvbiBhIHByb2Nlc3Mgb3IgdGhyZWFkCiAgIyBjbG9ja19nZXRyZXMgLSBjbG9jayBhbmQgdGltZSBmdW5jdGlvbnMKICAjIGNsb2NrX2dldHRpbWUgLSBjbG9jayBhbmQgdGltZSBmdW5jdGlvbnMKICAjIGdldGdyb3VwcyAtIGdldC9zZXQgbGlzdCBvZiBzdXBwbGVtZW50YXJ5IGdyb3VwIElEcwogICMgc2V0Z3JvdXBzIC0gZ2V0L3NldCBsaXN0IG9mIHN1cHBsZW1lbnRhcnkgZ3JvdXAgSURzCiAgIyB2bXNwbGljZSAtIHNwbGljZSB1c2VyIHBhZ2VzIHRvL2Zyb20gYSBwaXBlCiAgIyBlcG9sbF9jcmVhdGUgLSBvcGVuIGFuIGVwb2xsIGZpbGUgZGVzY3JpcHRvcgogICMgZXBvbGxfY3JlYXRlMSAtIG9wZW4gYW4gZXBvbGwgZmlsZSBkZXNjcmlwdG9yCiAgIyBwb3NpeF9mYWR2aXNlIC0gcHJlZGVjbGFyZSBhbiBhY2Nlc3MgcGF0dGVybiBmb3IgZmlsZSBkYXRhCiAgIyBzaWd3YWl0aW5mbyAtIHN5bmNocm9ub3VzbHkgd2FpdCBmb3IgcXVldWVkIHNpZ25hbHMKICAjIHNpZ3RpbWVkd2FpdCAtIHN5bmNocm9ub3VzbHkgd2FpdCBmb3IgcXVldWVkIHNpZ25hbHMKICAjIHJ0X3NpZ3RpbWVkd2FpdCAtIHN5bmNocm9ub3VzbHkgd2FpdCBmb3IgcXVldWVkIHNpZ25hbHMKICAjIHNpZ3JldHVybiAtIHJldHVybiBmcm9tIHNpZ25hbCBoYW5kbGVyIGFuZCBjbGVhbnVwIHN0YWNrIGZyYW1lCiAgIyBydF9zaWdyZXR1cm4gLSByZXR1cm4gZnJvbSBzaWduYWwgaGFuZGxlciBhbmQgY2xlYW51cCBzdGFjayBmcmFtZQogICMgZ2V0cmFuZG9tIC0gb2J0YWluIGEgc2VyaWVzIG9mIHJhbmRvbSBieXRlcwogICMga2V5Y3RsIC0gbWFuaXB1bGF0ZSB0aGUga2VybmVsJ3Mga2V5IG1hbmFnZW1lbnQgZmFjaWxpdHkKICAjIHNjaGVkX2dldHNjaGVkdWxlciAtIHNldCBhbmQgZ2V0IHNjaGVkdWxpbmcgcG9saWN5L3BhcmFtZXRlcnMKICAjIG1iaW5kIC0gc2V0IG1lbW9yeSBwb2xpY3kgZm9yIGEgbWVtb3J5IHJhbmdlCiAgIyBnZXRwcmlvcml0eSAtIGdldC9zZXQgcHJvZ3JhbSBzY2hlZHVsaW5nIHByaW9yaXR5CiAgIyBzZXRwcmlvcml0eSAtIGdldC9zZXQgcHJvZ3JhbSBzY2hlZHVsaW5nIHByaW9yaXR5CiAgIyBpbm90aWZ5X2luaXQgLSBpbml0aWFsaXplIGFuIGlub3RpZnkgaW5zdGFuY2UKICAjIGlub3RpZnlfaW5pdDEgLSBpbml0aWFsaXplIGFuIGlub3RpZnkgaW5zdGFuY2UKICAjIHNlbWN0bCAtIFN5c3RlbSBWIHNlbWFwaG9yZSBjb250cm9sIG9wZXJhdGlvbnMKICAjIGdldGhvc3RuYW1lIC0gZ2V0L3NldCBob3N0bmFtZQogICMgcHRyYWNlIC0gcHJvY2VzcyB0cmFjZQogICMgc3lzY3RsIC0gcmVhZC93cml0ZSBzeXN0ZW0gcGFyYW1ldGVycwogICMgZ2V0cGVlcm5hbWUgLSBnZXQgbmFtZSBvZiBjb25uZWN0ZWQgcGVlciBzb2NrZXQKICAjIGZvcmsgLSBjcmVhdGUgYSBjaGlsZCBwcm9jZXNzCiAgIyBxdWVyeV9tb2R1bGUgLSBxdWVyeSB0aGUga2VybmVsIGZvciB2YXJpb3VzIGJpdHMgcGVydGFpbmluZyB0byBtb2R1bGVzCiAgIyBpb2N0bF9saXN0IC0gbGlzdCBvZiBpb2N0bCBjYWxscyBpbiBMaW51eC9pMzg2IGtlcm5lbAogICMgbXNnZ2V0IC0gZ2V0IGEgU3lzdGVtIFYgbWVzc2FnZSBxdWV1ZSBpZGVudGlmaWVyCiAgIyBzcHVfY3JlYXRlIC0gY3JlYXRlIGEgbmV3IHNwdSBjb250ZXh0CiAgIyBzdWJwYWdlX3Byb3QgLSBkZWZpbmUgYSBzdWJwYWdlIHByb3RlY3Rpb24gZm9yIGFuIGFkZHJlc3MgcmFuZ2UKICAjIHF1b3RhY3RsIC0gbWFuaXB1bGF0ZSBkaXNrIHF1b3RhcwogICMgbmZzc2VydmN0bCAtIHN5c2NhbGwgaW50ZXJmYWNlIHRvIGtlcm5lbCBuZnMgZGFlbW9uCiAgIyBvcGVuYXQyIC0gb3BlbiBhbmQgcG9zc2libHkgY3JlYXRlIGEgZmlsZSAoZXh0ZW5kZWQpCiAgIyBnZXRybGltaXQgLSBnZXQvc2V0IHJlc291cmNlIGxpbWl0cwogICMgc2V0cmxpbWl0IC0gZ2V0L3NldCByZXNvdXJjZSBsaW1pdHMKICAjIHBybGltaXQgLSBnZXQvc2V0IHJlc291cmNlIGxpbWl0cwogICMgdGVlIC0gZHVwbGljYXRpbmcgcGlwZSBjb250ZW50CiAgIyBzaG1nZXQgLSBhbGxvY2F0ZXMgYSBTeXN0ZW0gViBzaGFyZWQgbWVtb3J5IHNlZ21lbnQKICAjIGNyZWF0ZV9tb2R1bGUgLSBjcmVhdGUgYSBsb2FkYWJsZSBtb2R1bGUgZW50cnkKICAjIGdldHRpbWVvZmRheSAtIGdldCAvIHNldCB0aW1lCiAgIyB0aW1lcl9jcmVhdGUgLSBjcmVhdGUgYSBQT1NJWCBwZXItcHJvY2VzcyB0aW1lcgogICMgZmFub3RpZnlfbWFyayAtIGFkZCwgcmVtb3ZlLCBvciBtb2RpZnkgYW4gZmFub3RpZnkgbWFyayBvbiBhIGZpbGVzeXN0ZW0gb2JqZWN0CiAgIyBwaXBlIC0gY3JlYXRlIHBpcGUKICAjIHBpcGUyIC0gY3JlYXRlIHBpcGUKICAjIGludHJvIC0gaW50cm9kdWN0aW9uIHRvIHN5c3RlbSBjYWxscwogICMgbG9va3VwX2Rjb29raWUgLSByZXR1cm4gYSBkaXJlY3RvcnkgZW50cnkncyBwYXRoCiAgIyBzeXNmcyAtIGdldCBmaWxlc3lzdGVtIHR5cGUgaW5mb3JtYXRpb24KICAjIHMzOTBfcnVudGltZV9pbnN0ciAtIGVuYWJsZS9kaXNhYmxlIHMzOTAgQ1BVIHJ1bi10aW1lIGluc3RydW1lbnRhdGlvbgogICMgc2V0bnMgLSByZWFzc29jaWF0ZSB0aHJlYWQgd2l0aCBhIG5hbWVzcGFjZQogICMgc2V0X21lbXBvbGljeSAtIHNldCBkZWZhdWx0IE5VTUEgbWVtb3J5IHBvbGljeSBmb3IgYSB0aHJlYWQgYW5kIGl0cyBjaGlsZHJlbgogICMgbmljZSAtIGNoYW5nZSBwcm9jZXNzIHByaW9yaXR5CiAgIyBpb19zZXR1cCAtIGNyZWF0ZSBhbiBhc3luY2hyb25vdXMgSS9PIGNvbnRleHQKICAjIG1pbmNvcmUgLSBkZXRlcm1pbmUgd2hldGhlciBwYWdlcyBhcmUgcmVzaWRlbnQgaW4gbWVtb3J5CiAgIyBpb2N0bF9jb25zb2xlIC0gaW9jdGxzIGZvciBjb25zb2xlIHRlcm1pbmFsIGFuZCB2aXJ0dWFsIGNvbnNvbGVzCiAgIyBwb2xsIC0gd2FpdCBmb3Igc29tZSBldmVudCBvbiBhIGZpbGUgZGVzY3JpcHRvcgogICMgcHBvbGwgLSB3YWl0IGZvciBzb21lIGV2ZW50IG9uIGEgZmlsZSBkZXNjcmlwdG9yCiAgIyBjYXBnZXQgLSBzZXQvZ2V0IGNhcGFiaWxpdGllcyBvZiB0aHJlYWQocykKICAjIGNhcHNldCAtIHNldC9nZXQgY2FwYWJpbGl0aWVzIG9mIHRocmVhZChzKQogICMgaW9jdGxfdHR5IC0gaW9jdGxzIGZvciB0ZXJtaW5hbHMgYW5kIHNlcmlhbCBsaW5lcwogICMgaW9wbCAtIGNoYW5nZSBJL08gcHJpdmlsZWdlIGxldmVsCiAgIyBpb19nZXRldmVudHMgLSByZWFkIGFzeW5jaHJvbm91cyBJL08gZXZlbnRzIGZyb20gdGhlIGNvbXBsZXRpb24gcXVldWUKICAjIHByb2Nlc3Nfdm1fcmVhZHYgLSB0cmFuc2ZlciBkYXRhIGJldHdlZW4gcHJvY2VzcyBhZGRyZXNzIHNwYWNlcwogICMgcHJvY2Vzc192bV93cml0ZXYgLSB0cmFuc2ZlciBkYXRhIGJldHdlZW4gcHJvY2VzcyBhZGRyZXNzIHNwYWNlcwogICMgcGNpY29uZmlnX3JlYWQgLSBwY2kgZGV2aWNlIGluZm9ybWF0aW9uIGhhbmRsaW5nCiAgIyBwY2ljb25maWdfd3JpdGUgLSBwY2kgZGV2aWNlIGluZm9ybWF0aW9uIGhhbmRsaW5nCiAgIyBwY2ljb25maWdfaW9iYXNlIC0gcGNpIGRldmljZSBpbmZvcm1hdGlvbiBoYW5kbGluZwogICMgc2JyayAtIGNoYW5nZSBkYXRhIHNlZ21lbnQgc2l6ZQogICMgc2V0X3RpZF9hZGRyZXNzIC0gc2V0IHBvaW50ZXIgdG8gdGhyZWFkIElECiAgIyBwa2V5X2FsbG9jIC0gYWxsb2NhdGUgb3IgZnJlZSBhIHByb3RlY3Rpb24ga2V5CiAgIyBwa2V5X2ZyZWUgLSBhbGxvY2F0ZSBvciBmcmVlIGEgcHJvdGVjdGlvbiBrZXkKICAjIHNlbGVjdCAtIHN5bmNocm9ub3VzIEkvTyBtdWx0aXBsZXhpbmcKICAjIHBzZWxlY3QgLSBzeW5jaHJvbm91cyBJL08gbXVsdGlwbGV4aW5nCiAgIyBrZXhlY19sb2FkIC0gbG9hZCBhIG5ldyBrZXJuZWwgZm9yIGxhdGVyIGV4ZWN1dGlvbgogICMga2V4ZWNfZmlsZV9sb2FkIC0gbG9hZCBhIG5ldyBrZXJuZWwgZm9yIGxhdGVyIGV4ZWN1dGlvbgogICMgcGVyc29uYWxpdHkgLSBzZXQgdGhlIHByb2Nlc3MgZXhlY3V0aW9uIGRvbWFpbgogICMgaW9jdGxfZ2V0ZnNtYXAgLSByZXRyaWV2ZSB0aGUgcGh5c2ljYWwgbGF5b3V0IG9mIHRoZSBmaWxlc3lzdGVtCiAgIyBpbm90aWZ5X3JtX3dhdGNoIC0gcmVtb3ZlIGFuIGV4aXN0aW5nIHdhdGNoIGZyb20gYW4gaW5vdGlmeSBpbnN0YW5jZQogICMgcGVyZl9ldmVudF9vcGVuIC0gc2V0IHVwIHBlcmZvcm1hbmNlIG1vbml0b3JpbmcKICAjIHRpbWVyX2dldG92ZXJydW4gLSBnZXQgb3ZlcnJ1biBjb3VudCBmb3IgYSBQT1NJWCBwZXItcHJvY2VzcyB0aW1lcgogICMgd2FpdDMgLSB3YWl0IGZvciBwcm9jZXNzIHRvIGNoYW5nZSBzdGF0ZSwgQlNEIHN0eWxlCiAgIyB3YWl0NCAtIHdhaXQgZm9yIHByb2Nlc3MgdG8gY2hhbmdlIHN0YXRlLCBCU0Qgc3R5bGUKICAjIGxpbmsgLSBtYWtlIGEgbmV3IG5hbWUgZm9yIGEgZmlsZQogICMgbGlua2F0IC0gbWFrZSBhIG5ldyBuYW1lIGZvciBhIGZpbGUKICAjIHNjaGVkX3JyX2dldF9pbnRlcnZhbCAtIGdldCB0aGUgU0NIRURfUlIgaW50ZXJ2YWwgZm9yIHRoZSBuYW1lZCBwcm9jZXNzCiAgIyBtdW5tYXAgLSBtYXAgb3IgdW5tYXAgZmlsZXMgb3IgZGV2aWNlcyBpbnRvIG1lbW9yeQogICMgc29ja2V0Y2FsbCAtIHNvY2tldCBzeXN0ZW0gY2FsbHMKICAjIG1yZW1hcCAtIHJlbWFwIGEgdmlydHVhbCBtZW1vcnkgYWRkcmVzcwogICMgdmZvcmsgLSBjcmVhdGUgYSBjaGlsZCBwcm9jZXNzIGFuZCBibG9jayBwYXJlbnQKICAjIHNlY2NvbXAgLSBvcGVyYXRlIG9uIFNlY3VyZSBDb21wdXRpbmcgc3RhdGUgb2YgdGhlIHByb2Nlc3MKICAjIHJlcXVlc3Rfa2V5IC0gcmVxdWVzdCBhIGtleSBmcm9tIHRoZSBrZXJuZWwncyBrZXkgbWFuYWdlbWVudCBmYWNpbGl0eQogICMgc3lzY2FsbCAtIGluZGlyZWN0IHN5c3RlbSBjYWxsCiAgIyBrY21wIC0gY29tcGFyZSB0d28gcHJvY2Vzc2VzIHRvIGRldGVybWluZSBpZiB0aGV5IHNoYXJlIGEga2VybmVsIHJlc291cmNlCiAgIyByZWFkZGlyIC0gcmVhZCBkaXJlY3RvcnkgZW50cnkKICAjIGlvcGVybSAtIHNldCBwb3J0IGlucHV0L291dHB1dCBwZXJtaXNzaW9ucwogICMgc3B1X3J1biAtIGV4ZWN1dGUgYW4gU1BVIGNvbnRleHQKICAjIHJlYm9vdCAtIHJlYm9vdCBvciBlbmFibGUvZGlzYWJsZSBDdHJsLUFsdC1EZWwKICAjIHJlYWRhaGVhZCAtIGluaXRpYXRlIGZpbGUgcmVhZGFoZWFkIGludG8gcGFnZSBjYWNoZQogICMgc2NoZWRfZ2V0cGFyYW0gLSBzZXQgYW5kIGdldCBzY2hlZHVsaW5nIHBhcmFtZXRlcnMKICAjIGFjY3QgLSBzd2l0Y2ggcHJvY2VzcyBhY2NvdW50aW5nIG9uIG9yIG9mZgogICMgc2lnc3VzcGVuZCAtIHdhaXQgZm9yIGEgc2lnbmFsCiAgIyBydF9zaWdzdXNwZW5kIC0gd2FpdCBmb3IgYSBzaWduYWwKICAjIGV4aXRfZ3JvdXAgLSBleGl0IGFsbCB0aHJlYWRzIGluIGEgcHJvY2VzcwogICMgc29ja2V0IC0gY3JlYXRlIGFuIGVuZHBvaW50IGZvciBjb21tdW5pY2F0aW9uCiAgIyBpb2N0bF91c2VyZmF1bHRmZCAtIGNyZWF0ZSBhIGZpbGUgZGVzY3JpcHRvciBmb3IgaGFuZGxpbmcgcGFnZSBmYXVsdHMgaW4gdXNlciBzcGFjZQogICMgc2NoZWRfZ2V0X3ByaW9yaXR5X21heCAtIGdldCBzdGF0aWMgcHJpb3JpdHkgcmFuZ2UKICAjIHNjaGVkX2dldF9wcmlvcml0eV9taW4gIC0gZ2V0IHN0YXRpYyBwcmlvcml0eSByYW5nZQogICMgZ2V0ZGVudHMgLSBnZXQgZGlyZWN0b3J5IGVudHJpZXMKICAjIGdldGRlbnRzNjQgLSBnZXQgZGlyZWN0b3J5IGVudHJpZXMKICAjIHNlbGVjdCAtIHN5bmNocm9ub3VzIEkvTyBtdWx0aXBsZXhpbmcKICAjIHBzZWxlY3QgLSBzeW5jaHJvbm91cyBJL08gbXVsdGlwbGV4aW5nCiAgIyBGRF9DTFIgLSBzeW5jaHJvbm91cyBJL08gbXVsdGlwbGV4aW5nCiAgIyBGRF9JU1NFVCAtIHN5bmNocm9ub3VzIEkvTyBtdWx0aXBsZXhpbmcKICAjIEZEX1NFVCAtIHN5bmNocm9ub3VzIEkvTyBtdWx0aXBsZXhpbmcKICAjIEZEX1pFUk8gLSBzeW5jaHJvbm91cyBJL08gbXVsdGlwbGV4aW5nCiAgIyBhbGxvY19odWdlcGFnZXMgLSBhbGxvY2F0ZSBvciBmcmVlIGh1Z2UgcGFnZXMKICAjIGZyZWVfaHVnZXBhZ2VzIC0gYWxsb2NhdGUgb3IgZnJlZSBodWdlIHBhZ2VzCiAgIyBmc3luYyAtIHN5bmNocm9uaXplIGEgZmlsZSdzIGluLWNvcmUgc3RhdGUgd2l0aCBzdG9yYWdlIGRldmljZQogICMgZmRhdGFzeW5jIC0gc3luY2hyb25pemUgYSBmaWxlJ3MgaW4tY29yZSBzdGF0ZSB3aXRoIHN0b3JhZ2UgZGV2aWNlCiAgIyBzeXNjYWxscyAtIExpbnV4IHN5c3RlbSBjYWxscwogICMgbWVtZmRfY3JlYXRlIC0gY3JlYXRlIGFuIGFub255bW91cyBmaWxlCiAgIyBtb2RpZnlfbGR0IC0gZ2V0IG9yIHNldCBhIHBlci1wcm9jZXNzIExEVCBlbnRyeQogICMgZ2V0X2tlcm5lbF9zeW1zIC0gcmV0cmlldmUgZXhwb3J0ZWQga2VybmVsIGFuZCBtb2R1bGUgc3ltYm9scwogICMgbHNlZWsgLSByZXBvc2l0aW9uIHJlYWQvd3JpdGUgZmlsZSBvZmZzZXQKICAjIHNobWF0IC0gU3lzdGVtIFYgc2hhcmVkIG1lbW9yeSBvcGVyYXRpb25zCiAgIyBzaG1kdCAtIFN5c3RlbSBWIHNoYXJlZCBtZW1vcnkgb3BlcmF0aW9ucwogICMgdGltZXJfZGVsZXRlIC0gZGVsZXRlIGEgUE9TSVggcGVyLXByb2Nlc3MgdGltZXIKICAjIHBlcmZtb25jdGwgLSBpbnRlcmZhY2UgdG8gSUEtNjQgcGVyZm9ybWFuY2UgbW9uaXRvcmluZyB1bml0CiAgIyBtb3ZlX3BhZ2VzIC0gbW92ZSBpbmRpdmlkdWFsIHBhZ2VzIG9mIGEgcHJvY2VzcyB0byBhbm90aGVyIG5vZGUKICAjIGNoZGlyIC0gY2hhbmdlIHdvcmtpbmcgZGlyZWN0b3J5CiAgIyBmY2hkaXIgLSBjaGFuZ2Ugd29ya2luZyBkaXJlY3RvcnkKICAjIHRpbWUgLSBnZXQgdGltZSBpbiBzZWNvbmRzCiAgIyBfZXhpdCAtIHRlcm1pbmF0ZSB0aGUgY2FsbGluZyBwcm9jZXNzCiAgIyBfRXhpdCAtIHRlcm1pbmF0ZSB0aGUgY2FsbGluZyBwcm9jZXNzCiAgIyBzMzkwX3N0aHlpIC0gZW11bGF0ZSBTVEhZSSBpbnN0cnVjdGlvbgogICMgaW9fc3VibWl0IC0gc3VibWl0IGFzeW5jaHJvbm91cyBJL08gYmxvY2tzIGZvciBwcm9jZXNzaW5nCiAgIyBtbG9jayAtIGxvY2sgYW5kIHVubG9jayBtZW1vcnkKICAjIG1sb2NrMiAtIGxvY2sgYW5kIHVubG9jayBtZW1vcnkKICAjIG11bmxvY2sgLSBsb2NrIGFuZCB1bmxvY2sgbWVtb3J5CiAgIyBtbG9ja2FsbCAtIGxvY2sgYW5kIHVubG9jayBtZW1vcnkKICAjIG11bmxvY2thbGwgLSBsb2NrIGFuZCB1bmxvY2sgbWVtb3J5CiAgIyB1bWFzayAtIHNldCBmaWxlIG1vZGUgY3JlYXRpb24gbWFzawogICMgYXJjaF9wcmN0bCAtIHNldCBhcmNoaXRlY3R1cmUtc3BlY2lmaWMgdGhyZWFkIHN0YXRlCiAgIyB1c2VsaWIgLSBsb2FkIHNoYXJlZCBsaWJyYXJ5CiAgIyBzZW5kZmlsZSAtIHRyYW5zZmVyIGRhdGEgYmV0d2VlbiBmaWxlIGRlc2NyaXB0b3JzCiAgIyBzaG1jdGwgLSBTeXN0ZW0gViBzaGFyZWQgbWVtb3J5IGNvbnRyb2wKICAjIGVwb2xsX3dhaXQgLSB3YWl0IGZvciBhbiBJL08gZXZlbnQgb24gYW4gZXBvbGwgZmlsZSBkZXNjcmlwdG9yCiAgIyBlcG9sbF9wd2FpdCAtIHdhaXQgZm9yIGFuIEkvTyBldmVudCBvbiBhbiBlcG9sbCBmaWxlIGRlc2NyaXB0b3IKICAjIHNpZ2FsdHN0YWNrIC0gc2V0IGFuZC9vciBnZXQgc2lnbmFsIHN0YWNrIGNvbnRleHQKICAjIGlvY3RsIC0gY29udHJvbCBkZXZpY2UKICAjIHNpZ25hbGZkIC0gY3JlYXRlIGEgZmlsZSBkZXNjcmlwdG9yIGZvciBhY2NlcHRpbmcgc2lnbmFscwogICMgdW5zaGFyZSAtIGRpc2Fzc29jaWF0ZSBwYXJ0cyBvZiB0aGUgcHJvY2VzcyBleGVjdXRpb24gY29udGV4dAogICMgY2hyb290IC0gY2hhbmdlIHJvb3QgZGlyZWN0b3J5CiAgIyBtYWR2aXNlIC0gZ2l2ZSBhZHZpY2UgYWJvdXQgdXNlIG9mIG1lbW9yeQogICMgZ2V0dGlkIC0gZ2V0IHRocmVhZCBpZGVudGlmaWNhdGlvbgogICMgZ2V0c29ja25hbWUgLSBnZXQgc29ja2V0IG5hbWUKICAjIGlvX2Rlc3Ryb3kgLSBkZXN0cm95IGFuIGFzeW5jaHJvbm91cyBJL08gY29udGV4dAogICMgc2V0dXAgLSBzZXR1cCBkZXZpY2VzIGFuZCBmaWxlc3lzdGVtcywgbW91bnQgcm9vdCBmaWxlc3lzdGVtCiAgIyBudHBfYWRqdGltZSAtIHR1bmUga2VybmVsIGNsb2NrCiAgIyBzZW1nZXQgLSBnZXQgYSBTeXN0ZW0gViBzZW1hcGhvcmUgc2V0IGlkZW50aWZpZXIKICAjIGdldHVpZCAtIGdldCB1c2VyIGlkZW50aXR5CiAgIyBnZXRldWlkIC0gZ2V0IHVzZXIgaWRlbnRpdHkKICAjIF9zeXNjYWxsIC0gaW52b2tpbmcgYSBzeXN0ZW0gY2FsbCB3aXRob3V0IGxpYnJhcnkgc3VwcG9ydCAoT0JTT0xFVEUpCiAgIyBzY2hlZF9zZXRhZmZpbml0eSAtIFwgc2V0IGFuZCBnZXQgYSB0aHJlYWQncyBDUFUgYWZmaW5pdHkgbWFzawogICMgc2NoZWRfZ2V0YWZmaW5pdHkgLSBcIHNldCBhbmQgZ2V0IGEgdGhyZWFkJ3MgQ1BVIGFmZmluaXR5IG1hc2sKICAjIGNhY2hlZmx1c2ggLSBmbHVzaCBjb250ZW50cyBvZiBpbnN0cnVjdGlvbiBhbmQvb3IgZGF0YSBjYWNoZQogICMgcGl2b3Rfcm9vdCAtIGNoYW5nZSB0aGUgcm9vdCBtb3VudAogICMgbXNnY3RsIC0gU3lzdGVtIFYgbWVzc2FnZSBjb250cm9sIG9wZXJhdGlvbnMKICAjIGlvY3RsX2ZhdCAtIG1hbmlwdWxhdGluZyB0aGUgRkFUIGZpbGVzeXN0ZW0KICAjIHNldHBnaWQgLSBzZXQvZ2V0IHByb2Nlc3MgZ3JvdXAKICAjIGdldHBnaWQgLSBzZXQvZ2V0IHByb2Nlc3MgZ3JvdXAKICAjIHNldHBncnAgLSBzZXQvZ2V0IHByb2Nlc3MgZ3JvdXAKICAjIGdldHBncnAgLSBzZXQvZ2V0IHByb2Nlc3MgZ3JvdXAKICAjIHNvY2tldHBhaXIgLSBjcmVhdGUgYSBwYWlyIG9mIGNvbm5lY3RlZCBzb2NrZXRzCiAgIyBiZGZsdXNoIC0gc3RhcnQsIGZsdXNoLCBvciB0dW5lIGJ1ZmZlci1kaXJ0eS1mbHVzaCBkYWVtb24KICAjIGFsYXJtIC0gc2V0IGFuIGFsYXJtIGNsb2NrIGZvciBkZWxpdmVyeSBvZiBhIHNpZ25hbAogICMgdGltZXJfc2V0dGltZSAtIGFybS9kaXNhcm0gYW5kIGZldGNoIHN0YXRlIG9mIFBPU0lYIHBlci1wcm9jZXNzIHRpbWVyCiAgIyB0aW1lcl9nZXR0aW1lIC0gYXJtL2Rpc2FybSBhbmQgZmV0Y2ggc3RhdGUgb2YgUE9TSVggcGVyLXByb2Nlc3MgdGltZXIKICAjIGFkZF9rZXkgLSBhZGQgYSBrZXkgdG8gdGhlIGtlcm5lbCdzIGtleSBtYW5hZ2VtZW50IGZhY2lsaXR5CiAgIyBydF9zaWdxdWV1ZWluZm8gLSBxdWV1ZSBhIHNpZ25hbCBhbmQgZGF0YQogICMgcnRfdGdzaWdxdWV1ZWluZm8gLSBxdWV1ZSBhIHNpZ25hbCBhbmQgZGF0YQogICMgdXNlcmZhdWx0ZmQgLSBjcmVhdGUgYSBmaWxlIGRlc2NyaXB0b3IgZm9yIGhhbmRsaW5nIHBhZ2UgZmF1bHRzIGluIHVzZXIgc3BhY2UKICAjIHNlbW9wIC0gU3lzdGVtIFYgc2VtYXBob3JlIG9wZXJhdGlvbnMKICAjIHNlbXRpbWVkb3AgLSBTeXN0ZW0gViBzZW1hcGhvcmUgb3BlcmF0aW9ucwogICMgZ2V0Z2lkIC0gZ2V0IGdyb3VwIGlkZW50aXR5CiAgIyBnZXRlZ2lkIC0gZ2V0IGdyb3VwIGlkZW50aXR5CiAgIyBnZXRwaWQgLSBnZXQgcHJvY2VzcyBpZGVudGlmaWNhdGlvbgogICMgZ2V0cHBpZCAtIGdldCBwcm9jZXNzIGlkZW50aWZpY2F0aW9uCiAgIyBzaWdwcm9jbWFzayAtIGV4YW1pbmUgYW5kIGNoYW5nZSBibG9ja2VkIHNpZ25hbHMKICAjIHJ0X3NpZ3Byb2NtYXNrIC0gZXhhbWluZSBhbmQgY2hhbmdlIGJsb2NrZWQgc2lnbmFscwogICMgdW5hbWUgLSBnZXQgbmFtZSBhbmQgaW5mb3JtYXRpb24gYWJvdXQgY3VycmVudCBrZXJuZWwKICAjIHN0YXR4IC0gZ2V0IGZpbGUgc3RhdHVzIChleHRlbmRlZCkKICAjIGlvY3RsX2ZpY2xvbmVyYW5nZSAtIHNoYXJlIHNvbWUgdGhlIGRhdGEgb2Ygb25lIGZpbGUgd2l0aCBhbm90aGVyIGZpbGUKICAjIGlvY3RsX2ZpY2xvbmUgLSBzaGFyZSBzb21lIHRoZSBkYXRhIG9mIG9uZSBmaWxlIHdpdGggYW5vdGhlciBmaWxlCiAgIyBtcV9nZXRzZXRhdHRyIC0gZ2V0L3NldCBtZXNzYWdlIHF1ZXVlIGF0dHJpYnV0ZXMKICAjIGlvcHJpb19nZXQgLSBnZXQvc2V0IEkvTyBzY2hlZHVsaW5nIGNsYXNzIGFuZCBwcmlvcml0eQogICMgaW9wcmlvX3NldCAtIGdldC9zZXQgSS9PIHNjaGVkdWxpbmcgY2xhc3MgYW5kIHByaW9yaXR5CiAgIyBlcG9sbF9jdGwgLSBjb250cm9sIGludGVyZmFjZSBmb3IgYW4gZXBvbGwgZmlsZSBkZXNjcmlwdG9yCiAgIyBzeW5jIC0gY29tbWl0IGZpbGVzeXN0ZW0gY2FjaGVzIHRvIGRpc2sKICAjIHN5bmNmcyAtIGNvbW1pdCBmaWxlc3lzdGVtIGNhY2hlcyB0byBkaXNrCiAgIyBzZXRzaWQgLSBjcmVhdGVzIGEgc2Vzc2lvbiBhbmQgc2V0cyB0aGUgcHJvY2VzcyBncm91cCBJRAogICMgc2h1dGRvd24gLSBzaHV0IGRvd24gcGFydCBvZiBhIGZ1bGwtZHVwbGV4IGNvbm5lY3Rpb24KICAjIGdldHNpZCAtIGdldCBzZXNzaW9uIElECiAgIyBnZXRfdGhyZWFkX2FyZWEgLSBtYW5pcHVsYXRlIHRocmVhZC1sb2NhbCBzdG9yYWdlIGluZm9ybWF0aW9uCiAgIyBzZXRfdGhyZWFkX2FyZWEgLSBtYW5pcHVsYXRlIHRocmVhZC1sb2NhbCBzdG9yYWdlIGluZm9ybWF0aW9uCiAgIyB0aW1lcmZkX2NyZWF0ZSAtIHRpbWVycyB0aGF0IG5vdGlmeSB2aWEgZmlsZSBkZXNjcmlwdG9ycwogICMgdGltZXJmZF9zZXR0aW1lIC0gdGltZXJzIHRoYXQgbm90aWZ5IHZpYSBmaWxlIGRlc2NyaXB0b3JzCiAgIyB0aW1lcmZkX2dldHRpbWUgLSB0aW1lcnMgdGhhdCBub3RpZnkgdmlhIGZpbGUgZGVzY3JpcHRvcnMKICAjIGlvY3RsX2ZpZGVkdXBlcmFuZ2UgLSBzaGFyZSBzb21lIHRoZSBkYXRhIG9mIG9uZSBmaWxlIHdpdGggYW5vdGhlciBmaWxlCiAgIyBuYW1lX3RvX2hhbmRsZV9hdCAtIG9idGFpbiBoYW5kbGUgZm9yIGEgcGF0aG5hbWUgYW5kIG9wZW4gZmlsZSB2aWEgYSBoYW5kbGUKICAjIG9wZW5fYnlfaGFuZGxlX2F0IC0gb2J0YWluIGhhbmRsZSBmb3IgYSBwYXRobmFtZSBhbmQgb3BlbiBmaWxlIHZpYSBhIGhhbmRsZQogICMgZnV0ZXggLSBmYXN0IHVzZXItc3BhY2UgbG9ja2luZwogICMgaW9jdGxfbnMgLSBpb2N0bCgpIG9wZXJhdGlvbnMgZm9yIExpbnV4IG5hbWVzcGFjZXMKICAjIHBpZGZkX3NlbmRfc2lnbmFsIC0gc2VuZCBhIHNpZ25hbCB0byBhIHByb2Nlc3Mgc3BlY2lmaWVkIGJ5IGEgZmlsZSBkZXNjcmlwdG9yCiAgIyBjbG9uZSAtIGNyZWF0ZSBhIGNoaWxkIHByb2Nlc3MKICAjIF9fY2xvbmUyIC0gY3JlYXRlIGEgY2hpbGQgcHJvY2VzcwogICMgY2xvbmUzIC0gY3JlYXRlIGEgY2hpbGQgcHJvY2VzcwogICMgdGltZXMgLSBnZXQgcHJvY2VzcyB0aW1lcwogICMgc3lzaW5mbyAtIHJldHVybiBzeXN0ZW0gaW5mb3JtYXRpb24KICAjIGlwYyAtIFN5c3RlbSBWIElQQyBzeXN0ZW0gY2FsbHMKICAjIGV2ZW50ZmQgLSBjcmVhdGUgYSBmaWxlIGRlc2NyaXB0b3IgZm9yIGV2ZW50IG5vdGlmaWNhdGlvbgogICMgd2FpdCAtIHdhaXQgZm9yIHByb2Nlc3MgdG8gY2hhbmdlIHN0YXRlCiAgIyB3YWl0cGlkIC0gd2FpdCBmb3IgcHJvY2VzcyB0byBjaGFuZ2Ugc3RhdGUKICAjIHdhaXRpZCAtIHdhaXQgZm9yIHByb2Nlc3MgdG8gY2hhbmdlIHN0YXRlCiAgIyBnZXRkb21haW5uYW1lIC0gZ2V0L3NldCBOSVMgZG9tYWluIG5hbWUKICAjIGlkbGUgLSBtYWtlIHByb2Nlc3MgMCBpZGxlCiAgIyBpbm90aWZ5X2FkZF93YXRjaCAtIGFkZCBhIHdhdGNoIHRvIGFuIGluaXRpYWxpemVkIGlub3RpZnkgaW5zdGFuY2UKICAjIGdldF9tZW1wb2xpY3kgLSByZXRyaWV2ZSBOVU1BIG1lbW9yeSBwb2xpY3kgZm9yIGEgdGhyZWFkCiAgIyBicGYgLSBwZXJmb3JtIGEgY29tbWFuZCBvbiBhbiBleHRlbmRlZCBCUEYgbWFwIG9yIHByb2dyYW0KICAjIGdldHNvY2tvcHQgLSBnZXQgYW5kIHNldCBvcHRpb25zIG9uIHNvY2tldHMKICAjIHNldHNvY2tvcHQgLSBnZXQgYW5kIHNldCBvcHRpb25zIG9uIHNvY2tldHMKICAjIGdldGl0aW1lciAtIGdldCBvciBzZXQgdmFsdWUgb2YgYW4gaW50ZXJ2YWwgdGltZXIKICAjIHNldGl0aW1lciAtIGdldCBvciBzZXQgdmFsdWUgb2YgYW4gaW50ZXJ2YWwgdGltZXIKICAjIG1lbWJhcnJpZXIgLSBpc3N1ZSBtZW1vcnkgYmFycmllcnMgb24gYSBzZXQgb2YgdGhyZWFkcwogICMgbXByb3RlY3QgLSBzZXQgcHJvdGVjdGlvbiBvbiBhIHJlZ2lvbiBvZiBtZW1vcnkKICAjIHBrZXlfbXByb3RlY3QgLSBzZXQgcHJvdGVjdGlvbiBvbiBhIHJlZ2lvbiBvZiBtZW1vcnkKICAjIGdldGNwdSAtIGRldGVybWluZSBDUFUgYW5kIE5VTUEgbm9kZSBvbiB3aGljaCB0aGUgY2FsbGluZyB0aHJlYWQgaXMgcnVubmluZwogICMgaW9jdGxfZnNsYWJlbCAtIGdldCBvciBzZXQgYSBmaWxlc3lzdGVtIGxhYmVsCiAgIyBsaXN0eGF0dHIgLSBsaXN0IGV4dGVuZGVkIGF0dHJpYnV0ZSBuYW1lcwogICMgbGxpc3R4YXR0ciAtIGxpc3QgZXh0ZW5kZWQgYXR0cmlidXRlIG5hbWVzCiAgIyBmbGlzdHhhdHRyIC0gbGlzdCBleHRlbmRlZCBhdHRyaWJ1dGUgbmFtZXMKICAjIF9sbHNlZWsgLSByZXBvc2l0aW9uIHJlYWQvd3JpdGUgZmlsZSBvZmZzZXQKICAjIGZjbnRsIC0gbWFuaXB1bGF0ZSBmaWxlIGRlc2NyaXB0b3IKICAjIHVzdGF0IC0gZ2V0IGZpbGVzeXN0ZW0gc3RhdGlzdGljcwogICMgc2lnbmFsIC0gQU5TSSBDIHNpZ25hbCBoYW5kbGluZwogICMgbmFub3NsZWVwIC0gaGlnaC1yZXNvbHV0aW9uIHNsZWVwCiAgIyBjb25uZWN0IC0gaW5pdGlhdGUgYSBjb25uZWN0aW9uIG9uIGEgc29ja2V0CiAgIyB2bTg2b2xkIC0gZW50ZXIgdmlydHVhbCA4MDg2IG1vZGUKICAjIHZtODYgLSBlbnRlciB2aXJ0dWFsIDgwODYgbW9kZQogICMgZmFub3RpZnlfaW5pdCAtIGNyZWF0ZSBhbmQgaW5pdGlhbGl6ZSBmYW5vdGlmeSBncm91cAogICMgYWZzX3N5c2NhbGwgLSB1bmltcGxlbWVudGVkIHN5c3RlbSBjYWxscwogICMgYnJlYWsgLSB1bmltcGxlbWVudGVkIHN5c3RlbSBjYWxscwogICMgZmF0dGFjaCAtIHVuaW1wbGVtZW50ZWQgc3lzdGVtIGNhbGxzCiAgIyBmZGV0YWNoIC0gdW5pbXBsZW1lbnRlZCBzeXN0ZW0gY2FsbHMKICAjIGZ0aW1lIC0gdW5pbXBsZW1lbnRlZCBzeXN0ZW0gY2FsbHMKICAjIGdldG1zZyAtIHVuaW1wbGVtZW50ZWQgc3lzdGVtIGNhbGxzCiAgIyBnZXRwbXNnIC0gdW5pbXBsZW1lbnRlZCBzeXN0ZW0gY2FsbHMKICAjIGd0dHkgLSB1bmltcGxlbWVudGVkIHN5c3RlbSBjYWxscwogICMgaXNhc3RyZWFtIC0gdW5pbXBsZW1lbnRlZCBzeXN0ZW0gY2FsbHMKICAjIGxvY2sgLSB1bmltcGxlbWVudGVkIHN5c3RlbSBjYWxscwogICMgbWFkdmlzZTEgLSB1bmltcGxlbWVudGVkIHN5c3RlbSBjYWxscwogICMgbXB4IC0gdW5pbXBsZW1lbnRlZCBzeXN0ZW0gY2FsbHMKICAjIHByb2YgLSB1bmltcGxlbWVudGVkIHN5c3RlbSBjYWxscwogICMgcHJvZmlsIC0gdW5pbXBsZW1lbnRlZCBzeXN0ZW0gY2FsbHMKICAjIHB1dG1zZyAtIHVuaW1wbGVtZW50ZWQgc3lzdGVtIGNhbGxzCiAgIyBwdXRwbXNnIC0gdW5pbXBsZW1lbnRlZCBzeXN0ZW0gY2FsbHMKICAjIHNlY3VyaXR5IC0gdW5pbXBsZW1lbnRlZCBzeXN0ZW0gY2FsbHMKICAjIHN0dHkgLSB1bmltcGxlbWVudGVkIHN5c3RlbSBjYWxscwogICMgdHV4Y2FsbCAtIHVuaW1wbGVtZW50ZWQgc3lzdGVtIGNhbGxzCiAgIyB1bGltaXQgLSB1bmltcGxlbWVudGVkIHN5c3RlbSBjYWxscwogICMgdnNlcnZlciAtIHVuaW1wbGVtZW50ZWQgc3lzdGVtIGNhbGxzCiAgIyBvdXRiIC0gcG9ydCBJL08KICAjIG91dHcgLSBwb3J0IEkvTwogICMgb3V0bCAtIHBvcnQgSS9PCiAgIyBvdXRzYiAtIHBvcnQgSS9PCiAgIyBvdXRzdyAtIHBvcnQgSS9PCiAgIyBvdXRzbCAtIHBvcnQgSS9PCiAgIyBpbmIgLSBwb3J0IEkvTwogICMgaW53IC0gcG9ydCBJL08KICAjIGlubCAtIHBvcnQgSS9PCiAgIyBpbnNiIC0gcG9ydCBJL08KICAjIGluc3cgLSBwb3J0IEkvTwogICMgaW5zbCAtIHBvcnQgSS9PCiAgIyBvdXRiX3AgLSBwb3J0IEkvTwogICMgb3V0d19wIC0gcG9ydCBJL08KICAjIG91dGxfcCAtIHBvcnQgSS9PCiAgIyBpbmJfcCAtIHBvcnQgSS9PCiAgIyBpbndfcCAtIHBvcnQgSS9PCiAgIyBpbmxfcCAtIHBvcnQgSS9PCiAgIyBtaWdyYXRlX3BhZ2VzIC0gbW92ZSBhbGwgcGFnZXMgaW4gYSBwcm9jZXNzIHRvIGFub3RoZXIgc2V0IG9mIG5vZGVzCiAgIyByZXN0YXJ0X3N5c2NhbGwgLSByZXN0YXJ0IGEgc3lzdGVtIGNhbGwgYWZ0ZXIgaW50ZXJydXB0aW9uIGJ5IGEgc3RvcCBzaWduYWwKICAjIGNsb3NlIC0gY2xvc2UgYSBmaWxlIGRlc2NyaXB0b3IKICAjIG1zZ3JjdiAtIFN5c3RlbSBWIG1lc3NhZ2UgcXVldWUgb3BlcmF0aW9ucwogICMgbXNnc25kIC0gU3lzdGVtIFYgbWVzc2FnZSBxdWV1ZSBvcGVyYXRpb25zCiAgIyByZWFkdiAtIHJlYWQgb3Igd3JpdGUgZGF0YSBpbnRvIG11bHRpcGxlIGJ1ZmZlcnMKICAjIHdyaXRldiAtIHJlYWQgb3Igd3JpdGUgZGF0YSBpbnRvIG11bHRpcGxlIGJ1ZmZlcnMKICAjIHByZWFkdiAtIHJlYWQgb3Igd3JpdGUgZGF0YSBpbnRvIG11bHRpcGxlIGJ1ZmZlcnMKICAjIHB3cml0ZXYgLSByZWFkIG9yIHdyaXRlIGRhdGEgaW50byBtdWx0aXBsZSBidWZmZXJzCiAgIyBwcmVhZHYyIC0gcmVhZCBvciB3cml0ZSBkYXRhIGludG8gbXVsdGlwbGUgYnVmZmVycwogICMgcHdyaXRldjIgLSByZWFkIG9yIHdyaXRlIGRhdGEgaW50byBtdWx0aXBsZSBidWZmZXJzCiAgIyBzeXNsb2cgLSByZWFkIGFuZC9vciBjbGVhciBrZXJuZWwgbWVzc2FnZSByaW5nIGJ1ZmZlcjsgc2V0IGNvbnNvbGVfbG9nbGV2ZWwKICAjIGtsb2djdGwgLSByZWFkIGFuZC9vciBjbGVhciBrZXJuZWwgbWVzc2FnZSByaW5nIGJ1ZmZlcjsgc2V0IGNvbnNvbGVfbG9nbGV2ZWwKICAjIHNjaGVkX3lpZWxkIC0geWllbGQgdGhlIHByb2Nlc3NvcgogICMgdmhhbmd1cCAtIHZpcnR1YWxseSBoYW5ndXAgdGhlIGN1cnJlbnQgdGVybWluYWwKICAjIGlvY3RsX2lmbGFncyAtIGlvY3RsKCkgb3BlcmF0aW9ucyBmb3IgaW5vZGUgZmxhZ3MKICAjIHNnZXRtYXNrIC0gbWFuaXB1bGF0aW9uIG9mIHNpZ25hbCBtYXNrIChvYnNvbGV0ZSkKICAjIHNzZXRtYXNrIC0gbWFuaXB1bGF0aW9uIG9mIHNpZ25hbCBtYXNrIChvYnNvbGV0ZSkKICAjIHN5bmNfZmlsZV9yYW5nZSAtIHN5bmMgYSBmaWxlIHNlZ21lbnQgd2l0aCBkaXNrCiAgIyBjb3B5X2ZpbGVfcmFuZ2UgLSBDb3B5IGEgcmFuZ2Ugb2YgZGF0YSBmcm9tIG9uZSBmaWxlIHRvIGFub3RoZXIKICAjIHNpZ3BlbmRpbmcgLSBleGFtaW5lIHBlbmRpbmcgc2lnbmFscwogICMgcnRfc2lncGVuZGluZyAtIGV4YW1pbmUgcGVuZGluZyBzaWduYWxzCiAgIyBnZXR1bndpbmQgLSBjb3B5IHRoZSB1bndpbmQgZGF0YSB0byBjYWxsZXIncyBidWZmZXIKICAjIG1zeW5jIC0gc3luY2hyb25pemUgYSBmaWxlIHdpdGggYSBtZW1vcnkgbWFwCiAgIyBnZXRfcm9idXN0X2xpc3QgLSBnZXQvc2V0IGxpc3Qgb2Ygcm9idXN0IGZ1dGV4ZXMKICAjIHNldF9yb2J1c3RfbGlzdCAtIGdldC9zZXQgbGlzdCBvZiByb2J1c3QgZnV0ZXhlcwogICMgZHVwIC0gZHVwbGljYXRlIGEgZmlsZSBkZXNjcmlwdG9yCiAgIyBkdXAyIC0gZHVwbGljYXRlIGEgZmlsZSBkZXNjcmlwdG9yCiAgIyBkdXAzIC0gZHVwbGljYXRlIGEgZmlsZSBkZXNjcmlwdG9yCiAgIyBzMzkwX3BjaV9tbWlvX3dyaXRlIC0gdHJhbnNmZXIgZGF0YSB0by9mcm9tIFBDSSBNTUlPIG1lbW9yeSBwYWdlCiAgIyBzMzkwX3BjaV9tbWlvX3JlYWQgLSB0cmFuc2ZlciBkYXRhIHRvL2Zyb20gUENJIE1NSU8gbWVtb3J5IHBhZ2UKICAjIHBhdXNlIC0gd2FpdCBmb3Igc2lnbmFsCiAgIyBzd2Fwb24gLSBzdGFydC9zdG9wIHN3YXBwaW5nIHRvIGZpbGUvZGV2aWNlCiAgIyBzd2Fwb2ZmIC0gc3RhcnQvc3RvcCBzd2FwcGluZyB0byBmaWxlL2RldmljZQoKICAjIFJlY29yZCB0eXBlIG5vcm1hbGl6YXRpb25zCiAgIyBVc2VmdWwgbGlua3M6CiAgIyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vdG9ydmFsZHMvbGludXgvdjQuMTYvaW5jbHVkZS91YXBpL2xpbnV4L2F1ZGl0LmgKICAjIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9saW51eC1hdWRpdC9hdWRpdC11c2Vyc3BhY2UvNGQ5MzMzMDFiMTgzNWNhZmEwOGI5ZTllZjcwNWM4ZmI2Yzk2Y2I2Mi9saWIvbGliYXVkaXQuaAogICMgaHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lY3MvY3VycmVudC9lY3MtYWxsb3dlZC12YWx1ZXMtZXZlbnQtY2F0ZWdvcnkuaHRtbAoKICAjIElBTSByZWxhdGVkIGV2ZW50cwoKICAjIEFVRElUX0FDQ1RfTE9DSyAtIFVzZXIncyBhY2NvdW50IGxvY2tlZCBieSBhZG1pbgogIC0gcmVjb3JkX3R5cGVzOiBBQ0NUX0xPQ0sKICAgIGFjdGlvbjogbG9ja2VkLWFjY291bnQKICAgIGVjczoKICAgICAgPDw6ICplY3MtaWFtCiAgICAgIHR5cGU6CiAgICAgICAgLSB1c2VyCiAgICAgICAgLSBpbmZvCiAgIyBBVURJVF9BQ0NUX1VOTE9DSyAtIFVzZXIncyBhY2NvdW50IHVubG9ja2VkIGJ5IGFkbWluCiAgLSByZWNvcmRfdHlwZXM6IEFDQ1RfVU5MT0NLCiAgICBhY3Rpb246IHVubG9ja2VkLWFjY291bnQKICAgIGVjczoKICAgICAgPDw6ICplY3MtaWFtCiAgICAgIHR5cGU6CiAgICAgICAgLSB1c2VyCiAgICAgICAgLSBpbmZvCiAgIyBBVURJVF9BRERfR1JPVVAgLSBHcm91cCBhY2NvdW50IGFkZGVkCiAgLSByZWNvcmRfdHlwZXM6IEFERF9HUk9VUAogICAgYWN0aW9uOiBhZGRlZC1ncm91cC1hY2NvdW50LXRvCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IFtpZCwgYWNjdF0KICAgICAgd2hhdDogYWNjb3VudAogICAgZWNzOgogICAgICA8PDogKmVjcy1pYW0KICAgICAgdHlwZToKICAgICAgICAtIGdyb3VwCiAgICAgICAgLSBjcmVhdGlvbgogICMgQVVESVRfQUREX1VTRVIgLSBVc2VyIGFjY291bnQgYWRkZWQKICAtIHJlY29yZF90eXBlczogQUREX1VTRVIKICAgIGFjdGlvbjogYWRkZWQtdXNlci1hY2NvdW50CiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IFtpZCwgYWNjdF0KICAgICAgd2hhdDogYWNjb3VudAogICAgZWNzOgogICAgICA8PDogKmVjcy1pYW0KICAgICAgdHlwZToKICAgICAgICAtIHVzZXIKICAgICAgICAtIGNyZWF0aW9uCiAgIyBBVURJVF9ERUxfR1JPVVAgLSBHcm91cCBhY2NvdW50IGRlbGV0ZWQKICAtIHJlY29yZF90eXBlczogREVMX0dST1VQCiAgICBhY3Rpb246IGRlbGV0ZWQtZ3JvdXAtYWNjb3VudC1mcm9tCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IFtpZCwgYWNjdF0KICAgICAgd2hhdDogYWNjb3VudAogICAgZWNzOgogICAgICA8PDogKmVjcy1pYW0KICAgICAgdHlwZToKICAgICAgICAtIGdyb3VwCiAgICAgICAgLSBkZWxldGlvbgogICMgQVVESVRfREVMX1VTRVIgLSBVc2VyIGFjY291bnQgZGVsZXRlZAogIC0gcmVjb3JkX3R5cGVzOiBERUxfVVNFUgogICAgYWN0aW9uOiBkZWxldGVkLXVzZXItYWNjb3VudAogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiBbaWQsIGFjY3RdCiAgICAgIHdoYXQ6IGFjY291bnQKICAgIGVjczoKICAgICAgPDw6ICplY3MtaWFtCiAgICAgIHR5cGU6CiAgICAgICAgLSB1c2VyCiAgICAgICAgLSBkZWxldGlvbgogICMgQVVESVRfR1JQX01HTVQgLSBHcm91cCBhY2NvdW50IGF0dHIgd2FzIG1vZGlmaWVkCiAgLSByZWNvcmRfdHlwZXM6IEdSUF9NR01UCiAgICBhY3Rpb246IG1vZGlmaWVkLWdyb3VwLWFjY291bnQKICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogW2lkLCBhY2N0XQogICAgICB3aGF0OiBhY2NvdW50CiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWlhbQogICAgICB0eXBlOgogICAgICAgIC0gZ3JvdXAKICAgICAgICAtIGNoYW5nZQogICMgQVVESVRfUk9MRV9BU1NJR04gLSBBZG1pbiBhc3NpZ25lZCB1c2VyIHRvIHJvbGUKICAtIHJlY29yZF90eXBlczogUk9MRV9BU1NJR04KICAgIGFjdGlvbjogYXNzaWduZWQtdXNlci1yb2xlLXRvCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IFtpZCwgYWNjdF0KICAgICAgd2hhdDogYWNjb3VudAogICAgZWNzOgogICAgICA8PDogKmVjcy1pYW0KICAgICAgdHlwZToKICAgICAgICAtIHVzZXIKICAgICAgICAtIGNoYW5nZQogICMgQVVESVRfUk9MRV9NT0RJRlkgLSBBZG1pbiBtb2RpZmllZCBhIHJvbGUKICAtIHJlY29yZF90eXBlczogUk9MRV9NT0RJRlkKICAgIGFjdGlvbjogbW9kaWZpZWQtcm9sZQogICAgZWNzOgogICAgICA8PDogKmVjcy1pYW0KICAgICAgdHlwZToKICAgICAgICAtIGNoYW5nZQogICMgQVVESVRfUk9MRV9SRU1PVkUgLSBBZG1pbiByZW1vdmVkIHVzZXIgZnJvbSByb2xlCiAgLSByZWNvcmRfdHlwZXM6IFJPTEVfUkVNT1ZFCiAgICBhY3Rpb246IHJlbW92ZWQtdXNlLXJvbGUtZnJvbQogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiBbaWQsIGFjY3RdCiAgICAgIHdoYXQ6IGFjY291bnQKICAgIGVjczoKICAgICAgPDw6ICplY3MtaWFtCiAgICAgIHR5cGU6CiAgICAgICAgLSB1c2VyCiAgICAgICAgLSBjaGFuZ2UKICAjIEFVRElUX1VTRVJfTUdNVCAtIFVzZXIgYWNjdCBhdHRyaWJ1dGUgY2hhbmdlCiAgLSA8PDogKm1hY3JvLXVzZXItc2Vzc2lvbgogICAgcmVjb3JkX3R5cGVzOiBVU0VSX01HTVQKICAgIGFjdGlvbjogbW9kaWZpZWQtdXNlci1hY2NvdW50CiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWlhbQogICAgICB0eXBlOgogICAgICAgIC0gdXNlcgogICAgICAgIC0gY2hhbmdlCiAgIyBBVURJVF9VU0VSX0NIQVVUSFRPSyAtIFVzZXIgYWNjdCBwYXNzd29yZCBvciBwaW4gY2hhbmdlZAogIC0gPDw6ICptYWNyby11c2VyLXNlc3Npb24KICAgIHJlY29yZF90eXBlczogVVNFUl9DSEFVVEhUT0sKICAgIGFjdGlvbjogY2hhbmdlZC1wYXNzd29yZAogICAgZWNzOgogICAgICA8PDogKmVjcy1pYW0KICAgICAgdHlwZToKICAgICAgICAtIHVzZXIKICAgICAgICAtIGNoYW5nZQogICMgQVVESVRfR1JQX0NIQVVUSFRPSyAtIEdyb3VwIGFjY3QgcGFzc3dvcmQgb3IgcGluIGNoYW5nZWQKICAtIDw8OiAqbWFjcm8tdXNlci1zZXNzaW9uCiAgICByZWNvcmRfdHlwZXM6IEdSUF9DSEFVVEhUT0sKICAgIGFjdGlvbjogY2hhbmdlZC1ncm91cC1wYXNzd29yZAogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiBhY2N0CiAgICAgIHdoYXQ6IHVzZXItc2Vzc2lvbgogICAgZWNzOgogICAgICA8PDogKmVjcy1pYW0KICAgICAgdHlwZToKICAgICAgICAtIGdyb3VwCiAgICAgICAgLSBjaGFuZ2UKCiAgIyBBdXRoZW50aWNhdGlvbiByZWxhdGVkIGV2ZW50cwoKICAjIEFVRElUX0NSRURfQUNRIC0gVXNlciBjcmVkZW50aWFsIGFjcXVpcmVkCiAgLSA8PDogKm1hY3JvLXVzZXItc2Vzc2lvbgogICAgcmVjb3JkX3R5cGVzOiBDUkVEX0FDUQogICAgYWN0aW9uOiBhY3F1aXJlZC1jcmVkZW50aWFscwogICAgZWNzOiAqZWNzLWF1dGgKICAjIEFVRElUX0NSRURfRElTUCAtIFVzZXIgY3JlZGVudGlhbCBkaXNwb3NlZAogIC0gPDw6ICptYWNyby11c2VyLXNlc3Npb24KICAgIHJlY29yZF90eXBlczogQ1JFRF9ESVNQCiAgICBhY3Rpb246IGRpc3Bvc2VkLWNyZWRlbnRpYWxzCiAgICBlY3M6ICplY3MtYXV0aAogICMgQVVESVRfQ1JFRF9SRUZSIC0gVXNlciBjcmVkZW50aWFsIHJlZnJlc2hlZAogIC0gPDw6ICptYWNyby11c2VyLXNlc3Npb24KICAgIHJlY29yZF90eXBlczogQ1JFRF9SRUZSCiAgICBhY3Rpb246IHJlZnJlc2hlZC1jcmVkZW50aWFscwogICAgZWNzOiAqZWNzLWF1dGgKICAjIEFVRElUX0dSUF9BVVRIIC0gQXV0aGVudGljYXRpb24gZm9yIGdyb3VwIHBhc3N3b3JkCiAgLSByZWNvcmRfdHlwZXM6IEdSUF9BVVRICiAgICBhY3Rpb246IGF1dGhlbnRpY2F0ZWQtdG8tZ3JvdXAKICAgIGVjczogKmVjcy1hdXRoCiAgIyBBVURJVF9MT0dJTiAtIERlZmluZSB0aGUgbG9naW4gaWQgYW5kIGluZm9ybWF0aW9uCiAgLSByZWNvcmRfdHlwZXM6IExPR0lOCiAgICBhY3Rpb246IGNoYW5nZWQtbG9naW4taWQtdG8KICAgIHN1YmplY3Q6CiAgICAgIHByaW1hcnk6IFtvbGRfYXVpZCwgb2xkLWF1aWRdCiAgICAgIHNlY29uZGFyeTogdWlkCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IGF1aWQKICAgICAgd2hhdDogdXNlci1zZXNzaW9uCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWF1dGgKICAgICAgdHlwZTogc3RhcnQKICAjIEFVRElUX1VTRVJfQUNDVCAtIFVzZXIgc3lzdGVtIGFjY2VzcyBhdXRob3JpemF0aW9uCiAgLSA8PDogKm1hY3JvLXVzZXItc2Vzc2lvbgogICAgcmVjb3JkX3R5cGVzOiBVU0VSX0FDQ1QKICAgIGFjdGlvbjogd2FzLWF1dGhvcml6ZWQKICAgIGVjczogKmVjcy1hdXRoCiAgIyBBVURJVF9VU0VSX0FVVEggLSBVc2VyIHN5c3RlbSBhY2Nlc3MgYXV0aGVudGljYXRpb24KICAtIDw8OiAqbWFjcm8tdXNlci1zZXNzaW9uCiAgICByZWNvcmRfdHlwZXM6IFVTRVJfQVVUSAogICAgYWN0aW9uOiBhdXRoZW50aWNhdGVkCiAgICBlY3M6ICplY3MtYXV0aAogICMgQVVESVRfVVNFUl9FTkQgLSBVc2VyIHNlc3Npb24gZW5kCiAgLSA8PDogKm1hY3JvLXVzZXItc2Vzc2lvbgogICAgcmVjb3JkX3R5cGVzOiBVU0VSX0VORAogICAgYWN0aW9uOiBlbmRlZC1zZXNzaW9uCiAgICBlY3M6ICplY3MtYXV0aAogICMgQVVESVRfVVNFUl9FUlIgLSBVc2VyIGFjY3Qgc3RhdGUgZXJyb3IKICAtIDw8OiAqbWFjcm8tdXNlci1zZXNzaW9uCiAgICByZWNvcmRfdHlwZXM6IFVTRVJfRVJSCiAgICBhY3Rpb246IGVycm9yCiAgICBzb3VyY2VfaXA6IFthZGRyXQogICAgZWNzOiAqZWNzLWF1dGgKICAjIEFVRElUX1VTRVJfTE9HSU4gLSBVc2VyIGhhcyBsb2dnZWQgaW4KICAtIDw8OiAqbWFjcm8tdXNlci1zZXNzaW9uCiAgICByZWNvcmRfdHlwZXM6IFVTRVJfTE9HSU4KICAgIGFjdGlvbjogbG9nZ2VkLWluCiAgICBzb3VyY2VfaXA6IFthZGRyXQogICAgZWNzOgogICAgICA8PDogKmVjcy1hdXRoCiAgICAgIHR5cGU6IHN0YXJ0CiAgIyBBVURJVF9VU0VSX0xPR09VVCAtIFVzZXIgaGFzIGxvZ2dlZCBvdXQKICAtIDw8OiAqbWFjcm8tdXNlci1zZXNzaW9uCiAgICByZWNvcmRfdHlwZXM6IFVTRVJfTE9HT1VUCiAgICBhY3Rpb246IGxvZ2dlZC1vdXQKICAgIGVjczoKICAgICAgPDw6ICplY3MtYXV0aAogICAgICB0eXBlOiBlbmQKICAjIEFVRElUX1VTRVJfUk9MRV9DSEFOR0UgLSBVc2VyIGNoYW5nZWQgdG8gYSBuZXcgcm9sZQogIC0gPDw6ICptYWNyby11c2VyLXNlc3Npb24KICAgIHJlY29yZF90eXBlczogVVNFUl9ST0xFX0NIQU5HRQogICAgYWN0aW9uOiBjaGFuZ2VkLXJvbGUtdG8KICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogc2VsZWN0ZWQtY29udGV4dAogICAgICB3aGF0OiB1c2VyLXNlc3Npb24KICAjIEFVRElUX1VTRVJfU1RBUlQgLSBVc2VyIHNlc3Npb24gc3RhcnQKICAtIDw8OiAqbWFjcm8tdXNlci1zZXNzaW9uCiAgICByZWNvcmRfdHlwZXM6IFVTRVJfU1RBUlQKICAgIGFjdGlvbjogc3RhcnRlZC1zZXNzaW9uCiAgICBzb3VyY2VfaXA6IFthZGRyXQogICAgZWNzOiAqZWNzLWF1dGgKCiAgIyBIb3N0IHZpcnR1YWxpemF0aW9uIGV2ZW50cwoKICAjIEFVRElUX1ZJUlRfQ09OVFJPTCAtIFN0YXJ0LCBQYXVzZSwgU3RvcCBWTQogIC0gcmVjb3JkX3R5cGVzOiBWSVJUX0NPTlRST0wKICAgIGFjdGlvbjogaXNzdWVkLXZtLWNvbnRyb2wKICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogb3AKICAgICAgc2Vjb25kYXJ5OiB2bQogICAgICB3aGF0OiB2aXJ0dWFsLW1hY2hpbmUKICAgIGVjczogKmVjcy1ob3N0CiAgIyBBVURJVF9WSVJUX0NSRUFURSAtIENyZWF0aW9uIG9mIGd1ZXN0IGltYWdlCiAgLSByZWNvcmRfdHlwZXM6IFZJUlRfQ1JFQVRFCiAgICBhY3Rpb246IGNyZWF0ZWQtdm0taW1hZ2UKICAgIGVjczogKmVjcy1ob3N0CiAgIyBBVURJVF9WSVJUX0RFU1RST1kgLSBEZXN0cnVjdGlvbiBvZiBndWVzdCBpbWFnZQogIC0gcmVjb3JkX3R5cGVzOiBWSVJUX0RFU1RST1kKICAgIGFjdGlvbjogZGVsZXRlZC12bS1pbWFnZQogICAgZWNzOiAqZWNzLWhvc3QKICAjIEFVRElUX1ZJUlRfSU5URUdSSVRZX0NIRUNLIC0gR3Vlc3QgaW50ZWdyaXR5IHJlc3VsdHMKICAtIHJlY29yZF90eXBlczogVklSVF9JTlRFR1JJVFlfQ0hFQ0sKICAgIGFjdGlvbjogY2hlY2tlZC1pbnRlZ3JpdHktb2YKICAgIGVjczogKmVjcy1ob3N0CiAgIyBBVURJVF9WSVJUX01BQ0hJTkVfSUQgLSBCaW5kaW5nIG9mIGxhYmVsIHRvIFZNCiAgLSByZWNvcmRfdHlwZXM6IFZJUlRfTUFDSElORV9JRAogICAgYWN0aW9uOiBhc3NpZ25lZC12bS1pZAogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiB2bQogICAgICB3aGF0OiB2aXJ0dWFsLW1hY2hpbmUKICAgIGVjczogKmVjcy1ob3N0CiAgIyBBVURJVF9WSVJUX01JR1JBVEVfSU4gLSBJbmJvdW5kIGd1ZXN0IG1pZ3JhdGlvbiBpbmZvCiAgLSByZWNvcmRfdHlwZXM6IFZJUlRfTUlHUkFURV9JTgogICAgYWN0aW9uOiBtaWdyYXRlZC12bS1mcm9tCiAgICBlY3M6ICplY3MtaG9zdAogICMgQVVESVRfVklSVF9NSUdSQVRFX09VVCAtIE91dGJvdW5kIGd1ZXN0IG1pZ3JhdGlvbiBpbmZvCiAgLSByZWNvcmRfdHlwZXM6IFZJUlRfTUlHUkFURV9PVVQKICAgIGFjdGlvbjogbWlncmF0ZWQtdm0tdG8KICAgIGVjczogKmVjcy1ob3N0CiAgIyBBVURJVF9WSVJUX1JFU09VUkNFIC0gUmVzb3VyY2UgYXNzaWdubWVudAogIC0gcmVjb3JkX3R5cGVzOiBWSVJUX1JFU09VUkNFCiAgICBhY3Rpb246IGFzc2lnbmVkLXZtLXJlc291cmNlCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IHJlc3JjCiAgICAgIHNlY29uZGFyeTogdm0KICAgICAgd2hhdDogdmlydHVhbC1tYWNoaW5lCiAgICBlY3M6ICplY3MtaG9zdAoKICAjIFVzZXJzcGFjZSBwcm9jZXNzIGV2ZW50cwoKICAjIEFVRElUX0NIR1JQX0lEIC0gVXNlciBzcGFjZSBncm91cCBJRCBjaGFuZ2VkCiAgLSByZWNvcmRfdHlwZXM6IENIR1JQX0lECiAgICBhY3Rpb246IGNoYW5nZWQtZ3JvdXAKICAgIGVjczoKICAgICAgPDw6ICplY3MtcHJvY2VzcwogICAgICB0eXBlOiBjaGFuZ2UKICAjIEFVRElUX0NIVVNFUl9JRCAtIENoYW5nZWQgdXNlciBJRCBzdXBwbGVtZW50YWwgZGF0YQogIC0gcmVjb3JkX3R5cGVzOiBDSFVTRVJfSUQKICAgIGFjdGlvbjogY2hhbmdlZC11c2VyLWlkCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLXByb2Nlc3MKICAgICAgdHlwZTogY2hhbmdlCiAgIyBBVURJVF9URVNUIC0gVXNlZCBmb3IgdGVzdCBzdWNjZXNzIG1lc3NhZ2VzCiAgLSByZWNvcmRfdHlwZXM6IFRFU1QKICAgIGFjdGlvbjogc2VudC10ZXN0CiAgICBlY3M6ICplY3MtcHJvY2VzcwogICMgQVVESVRfVFJVU1RFRF9BUFAgLSBUcnVzdGVkIGFwcCBtc2cgLSBmcmVlc3R5bGUgdGV4dAogIC0gcmVjb3JkX3R5cGVzOiBUUlVTVEVEX0FQUAogICAgYWN0aW9uOiB1bmtub3duCiAgICBlY3M6ICplY3MtcHJvY2VzcwogICMgQVVESVRfVVNFUl9DTUQgLSBVc2VyIHNoZWxsIGNvbW1hbmQgYW5kIGFyZ3MKICAtIHJlY29yZF90eXBlczogVVNFUl9DTUQKICAgIGFjdGlvbjogcmFuLWNvbW1hbmQKICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogY21kCiAgICAgIHdoYXQ6IHByb2Nlc3MKICAgIGRlc2NyaXB0aW9uOiA+CiAgICAgIFRoZXNlIG1lc3NhZ2VzIGFyZSBmcm9tIHVzZXItc3BhY2UgYXBwcywgbGlrZSBzdWRvLCB0aGF0IGxvZyBjb21tYW5kcwogICAgICBiZWluZyBydW4gYnkgYSB1c2VyLiBUaGUgdWlkIGNvbnRhaW5lZCBpbiB0aGVzZSBtZXNzYWdlcyBpcyB1c2VyJ3MgVUlEIGF0CiAgICAgIHRoZSB0aW1lIHRoZSBjb21tYW5kIHdhcyBydW4uIEl0IGlzIG5vdCB0aGUgInRhcmdldCIgVUlEIHVzZWQgdG8gcnVuIHRoZQogICAgICBjb21tYW5kLCB3aGljaCBpcyBub3JtYWxseSByb290LgogICAgZWNzOgogICAgICA8PDogKmVjcy1wcm9jZXNzCiAgICAgIHR5cGU6IHN0YXJ0CgogICMgSG9zdC1sZXZlbCBldmVudHMKCiAgIyBBVURJVF9TWVNURU1fQk9PVCAtIFN5c3RlbSBib290CiAgLSByZWNvcmRfdHlwZXM6IFNZU1RFTV9CT09UCiAgICBhY3Rpb246IGJvb3RlZC1zeXN0ZW0KICAgIG9iamVjdDoKICAgICAgd2hhdDogc3lzdGVtCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWhvc3QKICAgICAgdHlwZTogc3RhcnQKICAjIEFVRElUX1NZU1RFTV9SVU5MRVZFTCAtIFN5c3RlbSBydW5sZXZlbCBjaGFuZ2UKICAtIHJlY29yZF90eXBlczogU1lTVEVNX1JVTkxFVkVMCiAgICBhY3Rpb246IGNoYW5nZWQtdG8tcnVubGV2ZWwKICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogbmV3LWxldmVsCiAgICAgIHdoYXQ6IHN5c3RlbQogICAgZWNzOgogICAgICA8PDogKmVjcy1ob3N0CiAgICAgIHR5cGU6IGNoYW5nZQogICMgQVVESVRfU1lTVEVNX1NIVVRET1dOIC0gU3lzdGVtIHNodXRkb3duCiAgLSByZWNvcmRfdHlwZXM6IFNZU1RFTV9TSFVURE9XTgogICAgYWN0aW9uOiBzaHV0ZG93bi1zeXN0ZW0KICAgIG9iamVjdDoKICAgICAgd2hhdDogc3lzdGVtCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLWhvc3QKICAgICAgdHlwZTogZW5kCgogICMgU2VydmljZS1sZXZlbCBldmVudHMKCiAgIyBBVURJVF9TRVJWSUNFX1NUQVJUIC0gU2VydmljZSAoZGFlbW9uKSBzdGFydAogIC0gcmVjb3JkX3R5cGVzOiBTRVJWSUNFX1NUQVJUCiAgICBhY3Rpb246IHN0YXJ0ZWQtc2VydmljZQogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiB1bml0CiAgICAgIHdoYXQ6IHNlcnZpY2UKICAgIGVjczoKICAgICAgPDw6ICplY3MtcHJvY2VzcwogICAgICB0eXBlOiBzdGFydAogICMgQVVESVRfU0VSVklDRV9TVE9QIC0gU2VydmljZSAoZGFlbW9uKSBzdG9wCiAgLSByZWNvcmRfdHlwZXM6IFNFUlZJQ0VfU1RPUAogICAgYWN0aW9uOiBzdG9wcGVkLXNlcnZpY2UKICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogdW5pdAogICAgICB3aGF0OiBzZXJ2aWNlCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLXByb2Nlc3MKICAgICAgdHlwZTogc3RvcAoKICAjIEF1ZGl0ZCBpbnRlcm5hbCBldmVudHMKCiAgIyBBVURJVF9DT05GSUdfQ0hBTkdFIC0gQXVkaXQgc3lzdGVtIGNvbmZpZ3VyYXRpb24gY2hhbmdlCiAgLSByZWNvcmRfdHlwZXM6IENPTkZJR19DSEFOR0UKICAgIGFjdGlvbjogY2hhbmdlZC1hdWRpdC1jb25maWd1cmF0aW9uCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6CiAgICAgICAgW29wLCBrZXksIGF1ZGl0X2VuYWJsZWQsIGF1ZGl0X3BpZCwgYXVkaXRfYmFja2xvZ19saW1pdCwgYXVkaXRfZmFpbHVyZV0KICAgICAgd2hhdDogYXVkaXQtY29uZmlnCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLXByb2Nlc3MKICAgICAgdHlwZTogY2hhbmdlCiAgIyBBVURJVF9EQUVNT05fQUJPUlQgLSBEYWVtb24gZXJyb3Igc3RvcCByZWNvcmQKICAtIHJlY29yZF90eXBlczogREFFTU9OX0FCT1JUCiAgICBhY3Rpb246IGFib3J0ZWQtYXVkaXRkLXN0YXJ0dXAKICAgIG9iamVjdDoKICAgICAgd2hhdDogc2VydmljZQogICAgZWNzOgogICAgICA8PDogKmVjcy1wcm9jZXNzCiAgICAgIHR5cGU6IHN0b3AKICAjIEFVRElUX0RBRU1PTl9BQ0NFUFQgLSBBdWRpdGQgYWNjZXB0ZWQgcmVtb3RlIGNvbm5lY3Rpb24KICAtIHJlY29yZF90eXBlczogREFFTU9OX0FDQ0VQVAogICAgYWN0aW9uOiByZW1vdGUtYXVkaXQtY29ubmVjdGVkCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IHNlcnZpY2UKICAgIGVjczoKICAgICAgPDw6ICplY3MtbmV0d29yawogICAgICB0eXBlOgogICAgICAgIC0gY29ubmVjdGlvbgogICAgICAgIC0gc3RhcnQKICAjIEFVRElUX0RBRU1PTl9DTE9TRSAtIEF1ZGl0ZCBjbG9zZWQgcmVtb3RlIGNvbm5lY3Rpb24KICAtIHJlY29yZF90eXBlczogREFFTU9OX0NMT1NFCiAgICBhY3Rpb246IHJlbW90ZS1hdWRpdC1kaXNjb25uZWN0ZWQKICAgIG9iamVjdDoKICAgICAgd2hhdDogc2VydmljZQogICAgZWNzOgogICAgICA8PDogKmVjcy1uZXR3b3JrCiAgICAgIHR5cGU6CiAgICAgICAgLSBjb25uZWN0aW9uCiAgICAgICAgLSBzdGFydAogICMgQVVESVRfREFFTU9OX0NPTkZJRyAtIERhZW1vbiBjb25maWcgY2hhbmdlCiAgLSByZWNvcmRfdHlwZXM6IERBRU1PTl9DT05GSUcKICAgIGFjdGlvbjogY2hhbmdlZC1hdWRpdGQtY29uZmlndXJhdGlvbgogICAgb2JqZWN0OgogICAgICB3aGF0OiBzZXJ2aWNlCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLXByb2Nlc3MKICAgICAgdHlwZTogc3RvcAogICMgQVVESVRfREFFTU9OX0VORCAtIERhZW1vbiBub3JtYWwgc3RvcCByZWNvcmQKICAtIHJlY29yZF90eXBlczogREFFTU9OX0VORAogICAgYWN0aW9uOiBzaHV0ZG93bi1hdWRpdAogICAgb2JqZWN0OgogICAgICB3aGF0OiBzZXJ2aWNlCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLXByb2Nlc3MKICAgICAgdHlwZTogc3RvcAogICMgQVVESVRfREFFTU9OX0VSUiAtIEF1ZGl0ZCBpbnRlcm5hbCBlcnJvcgogIC0gcmVjb3JkX3R5cGVzOiBEQUVNT05fRVJSCiAgICBhY3Rpb246IGF1ZGl0LWVycm9yCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IHNlcnZpY2UKICAgIGVjczogKmVjcy1wcm9jZXNzCiAgIyBBVURJVF9EQUVNT05fUkVDT05GSUcgLSBBdWRpdGQgc2hvdWxkIHJlY29uZmlndXJlCiAgLSByZWNvcmRfdHlwZXM6IERBRU1PTl9SRUNPTkZJRwogICAgYWN0aW9uOiByZWNvbmZpZ3VyZWQtYXVkaXRkCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IHNlcnZpY2UKICAgIGVjczoKICAgICAgPDw6ICplY3MtcHJvY2VzcwogICAgICB0eXBlOiBjaGFuZ2UKICAjIEFVRElUX0RBRU1PTl9SRVNVTUUgLSBBdWRpdGQgc2hvdWxkIHJlc3VtZSBsb2dnaW5nCiAgLSByZWNvcmRfdHlwZXM6IERBRU1PTl9SRVNVTUUKICAgIGFjdGlvbjogcmVzdW1lZC1hdWRpdC1sb2dnaW5nCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IHNlcnZpY2UKICAgIGVjczoKICAgICAgPDw6ICplY3MtcHJvY2VzcwogICAgICB0eXBlOiBjaGFuZ2UKICAjIEFVRElUX0RBRU1PTl9ST1RBVEUgLSBBdWRpdGQgc2hvdWxkIHJvdGF0ZSBsb2dzCiAgLSByZWNvcmRfdHlwZXM6IERBRU1PTl9ST1RBVEUKICAgIGFjdGlvbjogcm90YXRlZC1hdWRpdC1sb2dzCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IHNlcnZpY2UKICAgIGVjczoKICAgICAgPDw6ICplY3MtcHJvY2VzcwogICAgICB0eXBlOiBjaGFuZ2UKICAjIEFVRElUX0RBRU1PTl9TVEFSVCAtIERhZW1vbiBzdGFydHVwIHJlY29yZAogIC0gcmVjb3JkX3R5cGVzOiBEQUVNT05fU1RBUlQKICAgIGFjdGlvbjogc3RhcnRlZC1hdWRpdAogICAgb2JqZWN0OgogICAgICB3aGF0OiBzZXJ2aWNlCiAgICBlY3M6CiAgICAgIDw8OiAqZWNzLXByb2Nlc3MKICAgICAgdHlwZTogc3RhcnQKICAjIEFVRElUX0tFUk5FTCAtIEFzeW5jaHJvbm91cyBhdWRpdCByZWNvcmQuIE5PVCBBIFJFUVVFU1QuCiAgLSByZWNvcmRfdHlwZXM6IEtFUk5FTAogICAgYWN0aW9uOiBpbml0aWFsaXplZC1hdWRpdC1zdWJzeXN0ZW0KICAgIGVjczogKmVjcy1wcm9jZXNzCgogICMgQ29uZmlndXJhdGlvbiBjaGFuZ2UgZXZlbnRzCgogICMgQVVESVRfVVNZU19DT05GSUcgLSBVc2VyIHNwYWNlIHN5c3RlbSBjb25maWcgY2hhbmdlCiAgLSByZWNvcmRfdHlwZXM6IFVTWVNfQ09ORklHCiAgICBhY3Rpb246IGNoYW5nZWQtY29uZmlndXJhdGlvbgogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiBvcAogICAgICB3aGF0OiBzeXN0ZW0KICAjIEFVRElUX05FVEZJTFRFUl9DRkcgLSBOZXRmaWx0ZXIgY2hhaW4gbW9kaWZpY2F0aW9ucwogIC0gcmVjb3JkX3R5cGVzOiBORVRGSUxURVJfQ0ZHCiAgICBhY3Rpb246IGxvYWRlZC1maXJld2FsbC1ydWxlLXRvCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IHRhYmxlCiAgICAgIHdoYXQ6IGZpcmV3YWxsCiAgIyBBVURJVF9GRUFUVVJFX0NIQU5HRSAtIGF1ZGl0IGxvZyBsaXN0aW5nIGZlYXR1cmUgY2hhbmdlcwogIC0gcmVjb3JkX3R5cGVzOiBGRUFUVVJFX0NIQU5HRQogICAgYWN0aW9uOiBjaGFuZ2VkLWF1ZGl0LWZlYXR1cmUKICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogZmVhdHVyZQogICAgICB3aGF0OiBzeXN0ZW0KICAjIEFVRElUX1JFUExBQ0UgLSBSZXBsYWNlIGF1ZGl0ZCBpZiB0aGlzIHBhY2tldCB1bmFuc3dlcmQKCiAgIyBUVFkgZXZlbnRzCgogIC0gcmVjb3JkX3R5cGVzOgogICAgICAjIEFVRElUX1RUWSAtIElucHV0IG9uIGFuIGFkbWluaXN0cmF0aXZlIFRUWQogICAgICAtIFRUWQogICAgICAjIEFVRElUX1VTRVJfVFRZIC0gTm9uLUlDQU5PTiBUVFkgaW5wdXQgbWVhbmluZwogICAgICAtIFVTRVJfVFRZCiAgICBhY3Rpb246IHR5cGVkCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IGRhdGEKICAgICAgd2hhdDoga2V5c3Ryb2tlcwogICAgaG93OiBbY29tbSwgZXhlXQoKICAjIFBvbGljeSBldmVudHMKCiAgIyBBVURJVF9BVkMgLSBTRSBMaW51eCBhdmMgZGVuaWFsIG9yIGdyYW50IChzZWxpbnV4KQogIC0gcmVjb3JkX3R5cGVzOiBBVkMKICAgIGFjdGlvbjogdmlvbGF0ZWQtc2VsaW51eC1wb2xpY3kKICAgIHN1YmplY3Q6CiAgICAgIHByaW1hcnk6IHNjb250ZXh0CiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IHRjb250ZXh0CiAgICAgIHNlY29uZGFyeTogdGNsYXNzCiAgICBoYXNfZmllbGRzOgogICAgICAtIHNlcmVzdWx0CiAgIyBBVURJVF9BVkMgLSBTRSBMaW51eCBhdmMgZGVuaWFsIG9yIGdyYW50IChhcHBhcm1vcikKICAtIHJlY29yZF90eXBlczogQVZDCiAgICBhY3Rpb246IHZpb2xhdGVkLWFwcGFybW9yLXBvbGljeQogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiBvcGVyYXRpb24KICAgICAgc2Vjb25kYXJ5OiBbcmVxdWVzdGVkX21hc2ssIGRlbmllZF9tYXNrLCBjYXBuYW1lXQogICAgICB3aGF0OiBwb2xpY3kKICAgIGhhc19maWVsZHM6CiAgICAgIC0gYXBwYXJtb3IKICAjIEFVRElUX0ZTX1JFTEFCRUwgLSBGaWxlc3lzdGVtIHJlbGFiZWxlZAogIC0gcmVjb3JkX3R5cGVzOiBGU19SRUxBQkVMCiAgICBhY3Rpb246IHJlbGFiZWxlZC1maWxlc3lzdGVtCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IG1hYy1jb25maWcKICAjIEFVRElUX0xBQkVMX0xFVkVMX0NIQU5HRSAtIE9iamVjdCdzIGxldmVsIHdhcyBjaGFuZ2VkCiAgLSByZWNvcmRfdHlwZXM6IExBQkVMX0xFVkVMX0NIQU5HRQogICAgYWN0aW9uOiBtb2RpZmllZC1sZXZlbC1vZgogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiBwcmludGVyCiAgICAgIHdoYXQ6IHByaW50ZXIKICAjIEFVRElUX0xBQkVMX09WRVJSSURFIC0gQWRtaW4gaXMgb3ZlcnJpZGluZyBhIGxhYmVsCiAgLSByZWNvcmRfdHlwZXM6IExBQkVMX09WRVJSSURFCiAgICBhY3Rpb246IG92ZXJyb2RlLWxhYmVsLW9mCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IG1hYy1jb25maWcKICAjIEFVRElUX01BQ19DSEVDSyAtIFVzZXIgc3BhY2UgTUFDIGRlY2lzaW9uIHJlc3VsdHMKICAtIHJlY29yZF90eXBlczogTUFDX0NIRUNLCiAgICBhY3Rpb246IG1hYy1wZXJtaXNzaW9uCiAgIyBBVURJVF9NQUNfQ09ORklHX0NIQU5HRSAtIENoYW5nZXMgdG8gYm9vbGVhbnMKICAtIHJlY29yZF90eXBlczogTUFDX0NPTkZJR19DSEFOR0UKICAgIGFjdGlvbjogY2hhbmdlZC1zZWxpbnV4LWJvb2xlYW4KICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogYm9vbAogICAgICB3aGF0OiBtYWMtY29uZmlnCiAgIyBBVURJVF9NQUNfUE9MSUNZX0xPQUQgLSBQb2xpY3kgZmlsZSBsb2FkCiAgLSByZWNvcmRfdHlwZXM6IE1BQ19QT0xJQ1lfTE9BRAogICAgYWN0aW9uOiBsb2FkZWQtc2VsaW51eC1wb2xpY3kKICAgIG9iamVjdDoKICAgICAgd2hhdDogbWFjLWNvbmZpZwogICMgQVVESVRfTUFDX1NUQVRVUyAtIENoYW5nZWQgZW5mb3JjaW5nLHBlcm1pc3NpdmUsb2ZmCiAgLSByZWNvcmRfdHlwZXM6IE1BQ19TVEFUVVMKICAgIGFjdGlvbjogY2hhbmdlZC1zZWxpbnV4LWVuZm9yY2VtZW50CiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IGVuZm9yY2luZwogICAgICB3aGF0OiBtYWMtY29uZmlnCiAgIyBBVURJVF9VU0VSX0FWQyAtIFVzZXIgc3BhY2UgYXZjIG1lc3NhZ2UKICAtIHJlY29yZF90eXBlczogVVNFUl9BVkMKICAgIGFjdGlvbjogYWNjZXNzLXBlcm1pc3Npb24KICAjIEFVRElUX1VTRVJfTUFDX0NPTkZJR19DSEFOR0UgLSBDaGFuZ2UgbWFkZSB0byBNQUMgcG9saWN5CiAgLSByZWNvcmRfdHlwZXM6IFVTRVJfTUFDX0NPTkZJR19DSEFOR0UKICAgIGFjdGlvbjogY2hhbmdlZC1tYWMtY29uZmlndXJhdGlvbgogICAgb2JqZWN0OgogICAgICB3aGF0OiBtYWMtY29uZmlnCiAgIyBBVURJVF9VU0VSX01BQ19QT0xJQ1lfTE9BRCAtIFVzZXJzcGMgZGFlbW9uIGxvYWRlZCBwb2xpYwogIC0gcmVjb3JkX3R5cGVzOiBVU0VSX01BQ19QT0xJQ1lfTE9BRAogICAgYWN0aW9uOiBsb2FkZWQtbWFjLXBvbGljeQogICAgb2JqZWN0OgogICAgICB3aGF0OiBtYWMtY29uZmlnCiAgIyBBVURJVF9VU0VSX1NFTElOVVhfRVJSIC0gU0UgTGludXggdXNlciBzcGFjZSBlcnJvcgogIC0gcmVjb3JkX3R5cGVzOiBVU0VSX1NFTElOVVhfRVJSCiAgICBhY3Rpb246IGFjY2Vzcy1lcnJvcgogICMgQVVESVRfU0VDQ09NUCAtIFNlY3VyZSBDb21wdXRpbmcgZXZlbnQKICAtIHJlY29yZF90eXBlczogU0VDQ09NUAogICAgYWN0aW9uOiB2aW9sYXRlZC1zZWNjb21wLXBvbGljeQogICAgb2JqZWN0OgogICAgICBwcmltYXJ5OiBzeXNjYWxsCiAgICAgIHdoYXQ6IHByb2Nlc3MKICAjIEFVRElUX1NFTElOVVhfRVJSIC0gSW50ZXJuYWwgU0UgTGludXggRXJyb3JzCiAgLSBhY3Rpb246IGNhdXNlZC1tYWMtcG9saWN5LWVycm9yCiAgICBvYmplY3Q6CiAgICAgIHdoYXQ6IHN5c3RlbQogICAgcmVjb3JkX3R5cGVzOiBTRUxJTlVYX0VSUgogICMgQVVESVRfQVBQQVJNT1JfQUxMT1dFRAogICMgQVVESVRfQVBQQVJNT1JfREVOSUVECiAgIyBBVURJVF9BUFBBUk1PUl9FUlJPUgogICMgQVVESVRfQVZDX1BBVEggLSBkZW50cnksIHZmc21vdW50IHBhaXIgZnJvbSBhdmMKICAjIEFVRElUX0FQUEFSTU9SX0FVRElUCiAgIyBBVURJVF9BUFBBUk1PUl9ISU5UCiAgIyBBVURJVF9BUFBBUk1PUl9TVEFUVVMKICAjIEFVRElUX0FQUEFSTU9SX0VSUk9SCiAgIyBBVURJVF9ERVZfQUxMT0MgLSBEZXZpY2Ugd2FzIGFsbG9jYXRlZAogICMgQVVESVRfREVWX0RFQUxMT0MgLSBEZXZpY2Ugd2FzIGRlYWxsb2NhdGVkCiAgIyBBVURJVF9NQUNfVU5MQkxfQUxMT1cgLSBOZXRMYWJlbDogYWxsb3cgdW5sYWJlbGVkIHRyYWZmaWMKICAjIEFVRElUX01BQ19DSVBTT1Y0X0FERCAtIE5ldExhYmVsOiBhZGQgQ0lQU092NCBET0kgZW50cnkKICAjIEFVRElUX01BQ19DSVBTT1Y0X0RFTCAtIE5ldExhYmVsOiBkZWwgQ0lQU092NCBET0kgZW50cnkKICAjIEFVRElUX01BQ19NQVBfQUREIC0gTmV0TGFiZWw6IGFkZCBMU00gZG9tYWluIG1hcHBpbmcKICAjIEFVRElUX01BQ19NQVBfREVMIC0gTmV0TGFiZWw6IGRlbCBMU00gZG9tYWluIG1hcHBpbmcKICAjIEFVRElUX01BQ19JUFNFQ19FVkVOVCAtIEF1ZGl0IGFuIElQU2VjIGV2ZW50CiAgIyBBVURJVF9NQUNfVU5MQkxfU1RDQUREIC0gTmV0TGFiZWw6IGFkZCBhIHN0YXRpYyBsYWJlbAogICMgQVVESVRfTUFDX1VOTEJMX1NUQ0RFTCAtIE5ldExhYmVsOiBkZWwgYSBzdGF0aWMgbGFiZWwKICAjIEFVRElUX01BQ19DQUxJUFNPX0FERCAtIE5ldExhYmVsOiBhZGQgQ0FMSVBTTyBET0kgZW50cnkKICAjIEFVRElUX01BQ19DQUxJUFNPX0RFTCAtIE5ldExhYmVsOiBkZWwgQ0FMSVBTTyBET0kgZW50cnkKICAjIEFVRElUX1VTRVJfTEFCRUxFRF9FWFBPUlQgLSBPYmplY3QgZXhwb3J0ZWQgd2l0aCBsYWJlbAogICMgQVVESVRfVVNFUl9VTkxBQkVMRURfRVhQT1JUIC0gT2JqZWN0IGV4cG9ydGVkIHdpdGhvdXQgbGFiZWwKCiAgIyBDcnlwdG8gZXZlbnRzCgogIC0gPDw6ICptYWNyby11c2VyLXNlc3Npb24KICAgIGFjdGlvbjogbmVnb3RpYXRlZC1jcnlwdG8ta2V5CiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IGZwCiAgICAgIHNlY29uZGFyeTogW2FkZHIsIGhvc3RuYW1lXQogICAgICB3aGF0OiB1c2VyLXNlc3Npb24KICAgIHJlY29yZF90eXBlczogQ1JZUFRPX0tFWV9VU0VSCiAgICBzb3VyY2VfaXA6IFthZGRyXQogICAgZWNzOiAqZWNzLXByb2Nlc3MKICAtIGFjdGlvbjogY3J5cHRvLW9mZmljZXItbG9nZ2VkLWluCiAgICByZWNvcmRfdHlwZXM6IENSWVBUT19MT0dJTgogIC0gYWN0aW9uOiBjcnlwdG8tb2ZmaWNlci1sb2dnZWQtb3V0CiAgICByZWNvcmRfdHlwZXM6IENSWVBUT19MT0dPVVQKICAgIGVjczogKmVjcy1wcm9jZXNzCiAgLSA8PDogKm1hY3JvLXVzZXItc2Vzc2lvbgogICAgYWN0aW9uOiBzdGFydGVkLWNyeXB0by1zZXNzaW9uCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IGFkZHIKICAgICAgc2Vjb25kYXJ5OiBbcnBvcnRdCiAgICByZWNvcmRfdHlwZXM6IENSWVBUT19TRVNTSU9OCiAgICBzb3VyY2VfaXA6IFthZGRyXQogICAgZWNzOiAqZWNzLXByb2Nlc3MKICAtIGFjdGlvbjogYWNjZXNzLXJlc3VsdAogICAgcmVjb3JkX3R5cGVzOiBEQUNfQ0hFQ0sKCiAgIyBBbm9tYWxpZXMKCiAgIyBBVURJVF9BTk9NX0FCRU5EIC0gUHJvY2VzcyBlbmRlZCBhYm5vcm1hbGx5CiAgLSByZWNvcmRfdHlwZXM6IEFOT01fQUJFTkQKICAgIGFjdGlvbjogY3Jhc2hlZC1wcm9ncmFtCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IFtjb21tLCBleGVdCiAgICAgIHNlY29uZGFyeTogcGlkCiAgICAgIHdoYXQ6IHByb2Nlc3MKICAgIGhvdzogc2lnCiAgICBlY3M6CiAgICAgICMgY29uc2lkZXIgYWRkaW5nIGFuIGFub21hbHkgY2F0ZWdvcnkgd2hlbiB3ZSBpbnRyb2R1Y2UKICAgICAgIyB0byBFQ1MKICAgICAgPDw6ICplY3MtcHJvY2VzcwogICAgICB0eXBlOiBlbmQKICAjIEFVRElUX0FOT01fRVhFQyAtIEV4ZWN1dGlvbiBvZiBmaWxlCiAgLSByZWNvcmRfdHlwZXM6IEFOT01fRVhFQwogICAgYWN0aW9uOiBhdHRlbXB0ZWQtZXhlY3V0aW9uLW9mLWZvcmJpZGRlbi1wcm9ncmFtCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IGNtZAogICAgICB3aGF0OiBwcm9jZXNzCiAgICBob3c6IHRlcm1pbmFsCiAgICBlY3M6CiAgICAgICMgY29uc2lkZXIgYWRkaW5nIGFuIGFub21hbHkgY2F0ZWdvcnkgd2hlbiB3ZSBpbnRyb2R1Y2UKICAgICAgIyB0byBFQ1MKICAgICAgPDw6ICplY3MtcHJvY2VzcwogICAgICB0eXBlOiBzdGFydAogICMgQVVESVRfQU5PTV9MSU5LIC0gU3VzcGljaW91cyB1c2Ugb2YgZmlsZSBsaW5rcwogIC0gcmVjb3JkX3R5cGVzOiBBTk9NX0xJTksKICAgIGFjdGlvbjogdXNlZC1zdXNwY2lvdXMtbGluawogICMgQVVESVRfQU5PTV9MT0dJTl9GQUlMVVJFUyAtIEZhaWxlZCBsb2dpbiBsaW1pdCByZWFjaGVkCiAgLSA8PDogKm1hY3JvLXVzZXItc2Vzc2lvbgogICAgcmVjb3JkX3R5cGVzOiBBTk9NX0xPR0lOX0ZBSUxVUkVTCiAgICBhY3Rpb246IGZhaWxlZC1sb2ctaW4tdG9vLW1hbnktdGltZXMtdG8KICAjIEFVRElUX0FOT01fTE9HSU5fTE9DQVRJT04gLSBMb2dpbiBmcm9tIGZvcmJpZGRlbiBsb2NhdGlvbgogIC0gPDw6ICptYWNyby11c2VyLXNlc3Npb24KICAgIHJlY29yZF90eXBlczogQU5PTV9MT0dJTl9MT0NBVElPTgogICAgYWN0aW9uOiBhdHRlbXB0ZWQtbG9nLWluLWZyb20tdW51c3VhbC1wbGFjZS10bwogICMgQVVESVRfQU5PTV9MT0dJTl9TRVNTSU9OUyAtIE1heCBjb25jdXJyZW50IHNlc3Npb25zIHJlYWNoZWQKICAtIDw8OiAqbWFjcm8tdXNlci1zZXNzaW9uCiAgICByZWNvcmRfdHlwZXM6IEFOT01fTE9HSU5fU0VTU0lPTlMKICAgIGFjdGlvbjogb3BlbmVkLXRvby1tYW55LXNlc3Npb25zLXRvCiAgIyBBVURJVF9BTk9NX0xPR0lOX1RJTUUgLSBMb2dpbiBhdHRlbXB0ZWQgYXQgYmFkIHRpbWUKICAtIDw8OiAqbWFjcm8tdXNlci1zZXNzaW9uCiAgICByZWNvcmRfdHlwZXM6IEFOT01fTE9HSU5fVElNRQogICAgYWN0aW9uOiBhdHRlbXB0ZWQtbG9nLWluLWR1cmluZy11bnVzdWFsLWhvdXItdG8KICAjIEFVRElUX0FOT01fUFJPTUlTQ1VPVVMgLSBEZXZpY2UgY2hhbmdlZCBwcm9taXNjdW91cyBtb2RlCiAgLSByZWNvcmRfdHlwZXM6IEFOT01fUFJPTUlTQ1VPVVMKICAgIGFjdGlvbjogY2hhbmdlZC1wcm9taXNjdW91cy1tb2RlLW9uLWRldmljZSAjIENvdWxkIGJlIGVudGVyZWQgb3IgZXhpdGVkIGJhc2VkIG9uIHByb20gZmllbGQuCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IGRldgogICAgICB3aGF0OiBuZXR3b3JrLWRldmljZQogICMgQVVESVRfQU5PTV9SQkFDX0lOVEVHUklUWV9GQUlMIC0gUkJBQyBmaWxlIGludGVncml0eSBmYWlsdXJlCiAgLSByZWNvcmRfdHlwZXM6IEFOT01fUkJBQ19JTlRFR1JJVFlfRkFJTAogICAgYWN0aW9uOiB0ZXN0ZWQtZmlsZS1zeXN0ZW0taW50ZWdyaXR5LW9mCiAgICBvYmplY3Q6CiAgICAgIHByaW1hcnk6IGhvc3RuYW1lCiAgICAgIHdoYXQ6IGZpbGVzeXN0ZW0KICAjIEFVRElUX0FOT01fTE9HSU5fQUNDVCAtIExvZ2luIGF0dGVtcHRlZCB0byB3YXRjaGVkIGFjY3QKICAjIEFVRElUX0FOT01fTUFYX0RBQyAtIE1heCBEQUMgZmFpbHVyZXMgcmVhY2hlZAogICMgQVVESVRfQU5PTV9NQVhfTUFDIC0gTWF4IE1BQyBmYWlsdXJlcyByZWFjaGVkCiAgIyBBVURJVF9BTk9NX0FNVFVfRkFJTCAtIEFNVFUgZmFpbHVyZQogICMgQVVESVRfQU5PTV9SQkFDX0ZBSUwgLSBSQkFDIHNlbGYgdGVzdCBmYWlsdXJlCiAgIyBBVURJVF9BTk9NX0NSWVBUT19GQUlMIC0gQ3J5cHRvIHN5c3RlbSB0ZXN0IGZhaWx1cmUKICAjIEFVRElUX0FOT01fTUtfRVhFIC0gTWFrZSBhbiBleGVjdXRhYmxlCiAgIyBBVURJVF9BTk9NX0FDQ0VTU19GUyAtIEFjY2VzcyBvZiBmaWxlIG9yIGRpcgogICMgQVVESVRfQU5PTV9BRERfQUNDVCAtIEFkZGluZyBhbiBhY2N0CiAgIyBBVURJVF9BTk9NX0RFTF9BQ0NUIC0gRGVsZXRpbmcgYW4gYWNjdAogICMgQVVESVRfQU5PTV9NT0RfQUNDVCAtIENoYW5naW5nIGFuIGFjY3QKICAjIEFVRElUX0FOT01fUk9PVF9UUkFOUyAtIFVzZXIgYmVjYW1lIHJvb3QKICAjIEFVRElUX0FOT01fTE9HSU5fU0VSVklDRSAtIFNlcnZpY2UgYWNjdCBhdHRlbXB0ZWQgbG9naW4KCiAgIyBBbm9tYWx5IHJlc3BvbnNlcwoKICAjIEFVRElUX1JFU1BfQU5PTUFMWSAtIEFub21hbHkgbm90IHJlYWN0ZWQgdG8KICAjIEFVRElUX1JFU1BfQUxFUlQgLSBBbGVydCBlbWFpbCB3YXMgc2VudAogICMgQVVESVRfUkVTUF9LSUxMX1BST0MgLSBLaWxsIHByb2dyYW0KICAjIEFVRElUX1JFU1BfVEVSTV9BQ0NFU1MgLSBUZXJtaW5hdGUgc2Vzc2lvbgogICMgQVVESVRfUkVTUF9BQ0NUX1JFTU9URSAtIEFjY3QgbG9ja2VkIGZyb20gcmVtb3RlIGFjY2VzcwogICMgQVVESVRfUkVTUF9BQ0NUX0xPQ0tfVElNRUQgLSBVc2VyIGFjY3QgbG9ja2VkIGZvciB0aW1lCiAgIyBBVURJVF9SRVNQX0FDQ1RfVU5MT0NLX1RJTUVEIC0gVXNlciBhY2N0IHVubG9ja2VkIGZyb20gdGltZQogICMgQVVESVRfUkVTUF9BQ0NUX0xPQ0sgLSBVc2VyIGFjY3Qgd2FzIGxvY2tlZAogICMgQVVESVRfUkVTUF9URVJNX0xPQ0sgLSBUZXJtaW5hbCB3YXMgbG9ja2VkCiAgIyBBVURJVF9SRVNQX1NFQk9PTCAtIFNldCBhbiBTRSBMaW51eCBib29sZWFuCiAgIyBBVURJVF9SRVNQX0VYRUMgLSBFeGVjdXRlIGEgc2NyaXB0CiAgIyBBVURJVF9SRVNQX1NJTkdMRSAtIEdvIHRvIHNpbmdsZSB1c2VyIG1vZGUKICAjIEFVRElUX1JFU1BfSEFMVCAtIHRha2UgdGhlIHN5c3RlbSBkb3duCiAgIyBBVURJVF9SRVNQX09SSUdJTl9CTE9DSyAtIEFkZHJlc3MgYmxvY2tlZCBieSBpcHRhYmxlcwogICMgQVVESVRfUkVTUF9PUklHSU5fQkxPQ0tfVElNRUQgLSBBZGRyZXNzIGJsb2NrZWQgZm9yIHRpbWUKCiAgIyBBdWRpdCBydWxlIGV2ZW50cwoKICAjIEFVRElUX1NZU0NBTEwgLSBTeXNjYWxsIGV2ZW50CiAgIyBBVURJVF9QQVRIIC0gRmlsZW5hbWUgcGF0aCBpbmZvcm1hdGlvbgogICMgQVVESVRfSVBDIC0gSVBDIHJlY29yZAogICMgQVVESVRfU09DS0VUQ0FMTCAtIHN5c19zb2NrZXRjYWxsIGFyZ3VtZW50cwogICMgQVVESVRfU09DS0FERFIgLSBzb2NrYWRkciBjb3BpZWQgYXMgc3lzY2FsbCBhcmcKICAjIEFVRElUX0NXRCAtIEN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkKICAjIEFVRElUX0VYRUNWRSAtIGV4ZWN2ZSBhcmd1bWVudHMKICAjIEFVRElUX0lQQ19TRVRfUEVSTSAtIElQQyBuZXcgcGVybWlzc2lvbnMgcmVjb3JkIHR5cGUKICAjIEFVRElUX01RX09QRU4gLSBQT1NJWCBNUSBvcGVuIHJlY29yZCB0eXBlCiAgIyBBVURJVF9NUV9TRU5EUkVDVi0gUE9TSVggTVEgc2VuZC9yZWNlaXZlIHJlY29yZCB0eXBlCiAgIyBBVURJVF9NUV9OT1RJRlkgLSBQT1NJWCBNUSBub3RpZnkgcmVjb3JkIHR5cGUKICAjIEFVRElUX01RX0dFVFNFVEFUVFIgLSBQT1NJWCBNUSBnZXQvc2V0IGF0dHJpYnV0ZSByZWNvcmQgdHlwZQogICMgQVVESVRfRkRfUEFJUiAtIGF1ZGl0IHJlY29yZCBmb3IgcGlwZS9zb2NrZXRwYWlyCiAgIyBBVURJVF9PQkpfUElEIC0gcHRyYWNlIHRhcmdldAogICMgQVVESVRfQlBSTV9GQ0FQUyAtIEluZm9ybWF0aW9uIGFib3V0IGZjYXBzIGluY3JlYXNpbmcgcGVybXMKICAjIEFVRElUX0NBUFNFVCAtIFJlY29yZCBzaG93aW5nIGFyZ3VtZW50IHRvIHN5c19jYXBzZXQKICAjIEFVRElUX01NQVAgLSBSZWNvcmQgc2hvd2luZyBkZXNjcmlwdG9yIGFuZCBmbGFncyBpbiBtbWFwCiAgIyBBVURJVF9ORVRGSUxURVJfUEtUIC0gUGFja2V0cyB0cmF2ZXJzaW5nIG5ldGZpbHRlciBjaGFpbnMKCiAgIyBJbnRlZ3JpdHkgY2hlY2tzCgogICMgQVVESVRfSU5URUdSSVRZX0RBVEEgLSBEYXRhIGludGVncml0eSB2ZXJpZmljYXRpb24KICAjIEFVRElUX0lOVEVHUklUWV9NRVRBREFUQSAtIE1ldGFkYXRhIGludGVncml0eSB2ZXJpZmljYXRpb24KICAjIEFVRElUX0lOVEVHUklUWV9TVEFUVVMgLSBJbnRlZ3JpdHkgZW5hYmxlIHN0YXR1cwogICMgQVVESVRfSU5URUdSSVRZX0hBU0ggLSBJbnRlZ3JpdHkgSEFTSCB0eXBlCiAgIyBBVURJVF9JTlRFR1JJVFlfUENSIC0gUENSIGludmFsaWRhdGlvbiBtc2dzCiAgIyBBVURJVF9JTlRFR1JJVFlfUlVMRSAtIFBvbGljeSBydWxlCgogICMgVmFyaW91cwoKICAjIEFVRElUX1VTRVIgLSBNZXNzYWdlIGZyb20gdXNlcnNwYWNlIC0tIGRlcHJlY2F0ZWQKICAtIHJlY29yZF90eXBlczogVVNFUgogICAgYWN0aW9uOiBzZW50LW1lc3NhZ2UKICAgIG9iamVjdDoKICAgICAgcHJpbWFyeTogYWRkcgo=")
		assets["normalizationData"] = value
	}

	if value, found := assets[key]; found {
		return value, nil
	}
	return nil, fmt.Errorf("asset not found for key=%v", key)
}
